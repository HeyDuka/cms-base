Widget.types.page_type.types['default'] = {
	remove_object: function(item_to_remove) {
		this.callPageTypeMethod('adminRemoveObject', item_to_remove.attr('data-object-id'), function(error) {
			item_to_remove.remove();
		});
	},
	
	edit_object: function(item_to_edit) {
		this.callPageTypeMethod('adminEdit', item_to_edit.attr('data-object-id'), function(result, error) {
			Widget.createWithElement(result[0], function(widget) {
				var content = widget._element;
				content.dialog({buttons: {
					'{{writeString=save}}': function() {
						widget.save(function() {
							content.dialog('close');
						});
					}
				}});
			}, result[1]);
		});
	},
	
	handle_preview: function(page_id, page_type) {
		//Initialized callback
		var edit_handler = function() {
			var container = jQuery(this);
			if(container.is('.editing')) {
				return;
			}
			container.addClass('editing');
			page_type.callPageTypeMethod('adminEdit', container.attr('data-object-id'), function(result, error) {
				Widget.createWithElement(result[0], function(widget) {
					container.empty().append(widget._element);
					// Reposition the bar
					container.data('preview_bar').position_bar();
				}, result[1]);
			});
		};
		jQuery('div.filled-container').click(edit_handler).each(function() {
			// Get the container
			var filled_container = jQuery(this);
			// Append the preview bar
			var preview_bar = jQuery.parseHTML('<div class="preview_bar"><div class="ui-icon ui-icon-pencil edit"></div><div class="ui-icon ui-icon-cancel cancel"></div><div class="ui-icon ui-icon-check save"></div></div>').hide().appendTo(document.body);
			filled_container.data('preview_bar', preview_bar);
			
			// Preview bar show/hide stuff
			preview_bar.position_bar = function() {
				var offset = filled_container.offset();
				offset.top += filled_container.height()-3;
				preview_bar.css({top: ''+offset.top+'px', left: ''+(offset.left-3)+'px'});
			};
			var is_over = 0;
			filled_container.bind('mouseenter', function() {
				if(is_over) {
					return;
				}
				preview_bar.show('fast');
				preview_bar.position_bar();
				is_over++;
			});
			jQuery(document.body).bind('mousemove', function(event) {
				var target = jQuery(this);
			});
			
			// Button event handlers
			preview_bar.find('.edit').click(edit_handler.bind(filled_container));
		});
	},
	
	handle_admin: function(page_id, container, page_type) {
		var pt_default = this;
		var filled_modules = jQuery('<div/>').addClass('filled_modules').appendTo(container);
		var available_modules = jQuery('<ol/>').addClass('available_modules draggable').appendTo(container);
		available_modules.empty();
		filled_modules.empty();
		
		// get containers before filling the objects
		page_type.callPageTypeMethod('adminGetContainers', function(container_html) {
			if(container_html) {
				jQuery.parseHTML(container_html).appendTo(filled_modules);
			}
			var filled_modules_containers = filled_modules.find('ol');			
			var remove_button = jQuery('<span/>').addClass('ui-icon ui-icon-trash').css({ float:"right", cursor: "pointer" });
			var edit_button = jQuery('<span/>').addClass('ui-icon ui-icon-pencil').css({ float:"right", cursor: "pointer" });
			
			// fill existing objects and handle drag and drop and sort
			page_type.callPageTypeMethod('adminListFilledFrontendModules', function(containers) {
				
				// add objects to target container
				jQuery.each(containers, function(container_name, params) {
					var target = filled_modules_containers.filter('[data-container-name='+container_name+']');
					jQuery.each(params.contents, function(object_id, content) {
						var li = jQuery('<li/>').text(content.object_type_display_name).attr({'data-object-type': content.object_type, 'data-container': container_name, 'data-object-id': object_id}).appendTo(target);
						li.prepend(remove_button.clone().click(pt_default.remove_object.bind(page_type, li)));
						li.prepend(edit_button.clone().click(pt_default.edit_object.bind(page_type, li)));
					});
				});
			
				filled_modules_containers.sortable({
					connectWith: filled_modules.find('ol'),
					helper: 'clone',
					update: function(event, ui) {
						if(ui.sender) {
							return;
						}
						var item = ui.item;
						// get final target (not original one)
						var target = jQuery(item).parent();
						var position = target.children().index(item);
						
						// just move within container
						if(target.attr('data-container-name') === item.attr('data-container')) {
							page_type.callPageTypeMethod('adminMoveObject', item.attr('data-object-id'), position);
							return;
						}
						// move to container and resort
						if(item.attr('data-container')) {
							item.attr('data-container', target.attr('data-container-name'));
							page_type.callPageTypeMethod('adminMoveObject', item.attr('data-object-id'), position, target.attr('data-container-name'));
							return;
						}
						// add new object, prepare for delete
						item.attr('data-container', target.attr('data-container-name'));
						page_type.callPageTypeMethod('adminAddObjectToContainer', target.attr('data-container-name'), item.attr('data-object-type'), position, function(object_id) {
							item.attr('data-object-id', object_id);
							item.prepend(remove_button.clone().click(pt_default.remove_object.bind(page_type, item)));
							item.prepend(edit_button.clone().click(pt_default.edit_object.bind(page_type, item)));
						});
					}
				});
			});
			page_type.callPageTypeMethod('adminListPossibleFrontendModules', function(modules) {
				var dragOptions = {
					cursor: "move",
					helper: 'clone',
					connectToSortable: filled_modules_containers
				};
				jQuery.each(modules, function(object_type, module_name) {
					var element = jQuery('<li/>').text(module_name).attr('data-object-type', object_type).draggable(dragOptions).sortable();
					element.appendTo(available_modules);
				});
			});
		});
	}
};