Widget.types.page_type.types['default'] = {
	handle_preview: function(page_id, page_type) {
		//Initialized callback
		jQuery('div.filled-container').each(function() {
			// Get the container
			var filled_container = jQuery(this);
			// Append the preview bar
			var preview_bar = jQuery.parseHTML('<div class="preview_bar"><div class="ui-icon ui-icon-pencil edit"></div><div class="ui-icon ui-icon-cancel cancel"></div><div class="ui-icon ui-icon-check save"></div><div class="ui-loading"></div></div>').hide().appendTo(document.body);
			preview_bar.data('filled_container', filled_container);
			filled_container.data('preview_bar', preview_bar);
			
			// Preview bar show/hide stuff
			filled_container.position_bar = function() {
				var offset = filled_container.offset();
				offset.top += filled_container.height()-3;
				offset.left = Math.max(offset.left, 0);
				preview_bar.css({top: ''+offset.top+'px', left: ''+(offset.left-3)+'px'});
			};
			
			var leave_timeout = null;
			var leave = function(event) {
				leave_timeout = window.setTimeout(function() {
					if(filled_container.is('.editing')) {
						return;
					}
					preview_bar.hide('fast');
					leave_timeout = null;
				}, 1000);
			};
			
			filled_container.bind('mouseenter', function() {
				if(leave_timeout) {
					window.clearTimeout(leave_timeout); leave_timeout = null;
				}
				preview_bar.show('fast');
				filled_container.position_bar();
			}).bind('mouseleave', leave);
			
			preview_bar.bind('mouseenter', function(event) {
				if(leave_timeout) {
					window.clearTimeout(leave_timeout); leave_timeout = null;
				}
			}).bind('mouseleave', leave);
		});
		// Button event handlers
		var cleanup = function(preview_bar, container) {
			page_type.callPageTypeMethod('adminPreview', container.attr('data-object-id'), function(result, error) {
				var elements = jQuery.parseHTML(result.preview_contents);
				container.empty().append(elements);
				container.removeClass('editing');
				preview_bar.removeClass('loading');
				container.position_bar();
			});
		};
		
		jQuery('.preview_bar').delegate('.edit', 'click', function() {
			var preview_bar = jQuery(this).closest('.preview_bar');
			preview_bar.show('fast');
			var container = preview_bar.data('filled_container');
			if(container.is('.editing')) {
				return;
			}
			container.addClass('editing');
			preview_bar.addClass('loading');
			page_type.callPageTypeMethod('adminEdit', container.attr('data-object-id'), function(result, error) {
				Widget.createWithElement(result[0], function(widget) {
					widget.handle('element_set', function(event, element) {
						container.empty().append(element);
					});
				}, function(widget) {
					if(widget.setObjectId) {
						widget.setObjectId(container.attr('data-object-id'));
					}
					preview_bar.removeClass('loading').addClass('editing');
					container.data('edit_widget', widget);
					// Reposition the bar
					container.position_bar();
				}, result[1]);
			});
		}).delegate('.cancel', 'click', function() {
			var preview_bar = jQuery(this).closest('.preview_bar');
			var container = preview_bar.data('filled_container');
			preview_bar.removeClass('editing').addClass('loading');
			cleanup(preview_bar, container);
		}).delegate('.save', 'click', function() {
			var preview_bar = jQuery(this).closest('.preview_bar');
			var container = preview_bar.data('filled_container');
			preview_bar.removeClass('editing').addClass('loading');
			var widget = container.data('edit_widget');
			container.data('edit_widget', null);
			if(!widget || widget.save(cleanup.bind(this, preview_bar, container)) === false) {
				preview_bar.removeClass('loading').addClass('editing');
			}
		});
	},
	
	//Admin helper methods
	remove_object: function(item_to_remove, force) {
		this.callPageTypeMethod('adminRemoveObject', item_to_remove.attr('data-object-id'), !!force, function(deleted) {
			if(deleted && !force) {
				Widget.types.page_type.types['default'].update_content_properties(item_to_remove, false);
			} else if(deleted) {
				item_to_remove.remove();
			}
		});
	},
	
	edit_object: function(item_to_edit) {
		this.callPageTypeMethod('adminEdit', item_to_edit.attr('data-object-id'), function(result, error) {
			Widget.createWithElement(result[0], function(widget) {
				var content = widget._element;
				if(widget.setObjectId) {
					widget.setObjectId(item_to_edit.attr('data-object-id'));
				}
				var rich_text = false;
				content.dialog({
					buttons: [{
						text: '{{writeString=save}}',
						className: 'primary ui-state-highlight',
						click: function() {
							widget.save(function() {
								Widget.types.page_type.types['default'].update_content_properties(item_to_edit, true);
								content.dialog('close');
							});
						}
					}],
					// modal: true,
					width: 550,
					// open: function(event, ui){},
					resize: function(event, ui){ // or use dialogresize see further down
						if(widget.internal_widget && widget.internal_widget.widgetType == 'rich_text'){
							if (!rich_text) rich_text = jQuery('#cke_contents_editor1');
							rich_text.css('height', ui.size.height - 200);
						}
					}
				});
				// $( ".selector" ).bind( "dialogresize", function(event, ui) {});
				
			}, result[1]);
		});
	},
	
	edit_condition: function(item_to_edit) {
		Widget.create('content_display_condition', function(widget) {
			widget.setContentObjectId(item_to_edit.attr('data-object-id'));
		}, jQuery.noop);
	},
	
	update_content_properties: function(element, is_filled_in_current_language) {
		var remove_button = element.find('.ui-icon.ui-icon-trash');
		if(!is_filled_in_current_language) {
			remove_button.addClass('delete_inactive').hide();
			element.addClass('language_object_emty');
		} else {
			remove_button.removeClass('delete_inactive').show();
			element.removeClass('language_object_emty');
		}
	},
	
	handle_admin: function(page_id, container, page_type) {
		var pt_default = this;
		var filled_modules = jQuery('<div/>').addClass('filled_modules').appendTo(container);
		var available_modules = jQuery('<ol/>').addClass('available_modules draggable').appendTo(container);
		var delete_drop_zone = jQuery('<div/>').addClass('delete_drop_zone droppable').html("<span>{{writeString=widget.page.drop_object_all_languages}}</span>").appendTo(container);
		delete_drop_zone.droppable({
			accept: 'li[data-container]',
			activeClass: 'ui-state-draggable',
			hoverClass: 'ui-state-droppable',
			drop: function(event, ui) {
				pt_default.remove_object.call(page_type, ui.draggable, true);
			}
		});
		available_modules.empty();
		filled_modules.empty();
		container.append('<br clear="both" />');
		
		
		// get containers before filling the objects
		page_type.callPageTypeMethod('adminGetContainers', function(container_html) {
			if(container_html) {
				jQuery.parseHTML(container_html).appendTo(filled_modules);
			}
			var filled_modules_containers = filled_modules.find('ol');			
			var remove_button = jQuery('<span/>').addClass('ui-icon ui-icon-trash').attr('title', "{{writeString=widget.delete_content_object}}").css({ float:"right", cursor: "pointer" });
			var edit_condition_button = jQuery('<span/>').addClass('ui-icon ui-icon-wrench').attr('title', "{{writeString=widget.edit_display_conditions}}").css({ float:"right", cursor: "pointer"});
			var edit_button = jQuery('<span/>').addClass('ui-icon ui-icon-pencil').attr('title', "{{writeString=widget.edit_language_content}}").css({ float:"right", cursor: "pointer" });
			
			// fill existing objects and handle drag and drop and sort
			page_type.callPageTypeMethod('adminListFilledFrontendModules', function(containers) {
				
				// add objects to target container
				jQuery.each(containers, function(container_name, params) {
					var target = filled_modules_containers.filter('[data-container-name='+container_name+']');
					jQuery.each(params.contents, function(object_id, content) {
						var li = jQuery('<li/>').text(content.object_type_display_name).attr({'data-object-type': content.object_type, 'data-container': container_name, 'data-object-id': object_id}).appendTo(target);
						li.prepend(remove_button.clone().click(pt_default.remove_object.bind(page_type, li, false)));
						li.prepend(edit_condition_button.clone().click(pt_default.edit_condition.bind(page_type, li)));
						li.prepend(edit_button.clone().click(pt_default.edit_object.bind(page_type, li)));
						pt_default.update_content_properties(li, content.content_info !== false);
					});
				});
			
				filled_modules_containers.sortable({
					connectWith: filled_modules.find('ol'),
					helper: 'clone',
					update: function(event, ui) {
						if(ui.sender) {
							return;
						}
						var item = ui.item;
						// get final target (not original one)
						var target = jQuery(item).parent();
						var position = target.children().index(item);
						
						// just move within container
						if(target.attr('data-container-name') === item.attr('data-container')) {
							page_type.callPageTypeMethod('adminMoveObject', item.attr('data-object-id'), position);
							return;
						}
						// move to container and resort
						if(item.attr('data-container')) {
							item.attr('data-container', target.attr('data-container-name'));
							page_type.callPageTypeMethod('adminMoveObject', item.attr('data-object-id'), position, target.attr('data-container-name'));
							return;
						}
						// add new object, prepare for delete
						item.attr('data-container', target.attr('data-container-name'));
						page_type.callPageTypeMethod('adminAddObjectToContainer', target.attr('data-container-name'), item.attr('data-object-type'), position, function(object_id) {
							item.attr('data-object-id', object_id);
							item.prepend(remove_button.clone().click(pt_default.remove_object.bind(page_type, item, false)));
							item.prepend(edit_condition_button.clone().click(pt_default.edit_condition.bind(page_type, item)));
							item.prepend(edit_button.clone().click(pt_default.edit_object.bind(page_type, item)));
							pt_default.update_content_properties(item, false);
						});
					}
				});
			});
			page_type.callPageTypeMethod('adminListPossibleFrontendModules', function(modules) {
				var dragOptions = {
					cursor: "move",
					helper: 'clone',
					connectToSortable: filled_modules_containers
				};
				jQuery.each(modules, function(object_type, module_name) {
					var element = jQuery('<li/>').text(module_name).attr('data-object-type', object_type).draggable(dragOptions).sortable();
					element.appendTo(available_modules);
// not yet but soon		jQuery('<span/>').addClass('handle').appendTo(element);
				});
			});
		});
	}
};