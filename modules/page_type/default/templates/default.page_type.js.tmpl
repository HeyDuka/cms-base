Widget.types.page_type.types['default'] = {
	handle_preview: function(page_id, page_type) {
		//Initialized callback
		jQuery('div.filled-container').each(function() {
			// Get the container
			var filled_container = jQuery(this);
			// Append the preview bar
			var preview_bar = jQuery.parseHTML('{{includeTemplate=preview_bar}}').hide().appendTo(document.body);
			preview_bar.data('filled_container', filled_container);
			filled_container.data('preview_bar', preview_bar);
			filled_container.data('protector', new UnsavedChanges());
			
			// Preview bar show/hide stuff
			filled_container.position_bar = function() {
				var offset = filled_container.offset();
				offset.top += filled_container.height();
				offset.left = Math.max(offset.left, 0);
				preview_bar.css({top: ''+offset.top+'px', left: ''+(offset.left)+'px'});
			};
			
			var leave_timeout = null;
			var leave = function(event) {
				leave_timeout = window.setTimeout(function() {
					if(filled_container.is('.editing')) {
						return;
					}
					preview_bar.hide('fast');
					leave_timeout = null;
				}, 1000);
			};
			
			filled_container.resize(function() {
				filled_container.position_bar();
			});
			
			filled_container.bind('mouseenter', function() {
				if(leave_timeout) {
					window.clearTimeout(leave_timeout); leave_timeout = null;
				}
				preview_bar.show('fast');
				filled_container.position_bar();
			}).bind('mouseleave', leave);
			
			preview_bar.bind('mouseenter', function(event) {
				if(leave_timeout) {
					window.clearTimeout(leave_timeout); leave_timeout = null;
				}
			}).bind('mouseleave', leave);
		});
		// Button event handlers
		var cleanup = function(preview_bar, container) {
			container.data('protector').unprotect(container.children()).release();
			page_type.callPageTypeMethod('adminPreview', container.attr('data-object-id'), function(result, error) {
				var elements = jQuery.parseHTML(result.preview_contents);
				container.empty().append(elements);
				container.removeClass('editing');
				preview_bar.removeClass('loading');
				container.position_bar();
				preview_bar.find('.additional-buttons').empty();
			});
		};
		
		jQuery('.preview_bar').delegate('.edit', 'click', function() {
			var preview_bar = jQuery(this).closest('.preview_bar');
			preview_bar.show('fast');
			var container = preview_bar.data('filled_container');
			if(container.is('.editing')) {
				return;
			}
			container.addClass('editing');
			preview_bar.addClass('loading');
			page_type.callPageTypeMethod('adminEdit', container.attr('data-object-id'), function(control_session_key) {
				Widget.create('language_object_control', function(language_object_control) {
					language_object_control.editor(function(result) {
						Widget.createWithElement(result[0], function(widget) {
							if(widget.setObjectId) {
								widget.setObjectId(container.attr('data-object-id'));
							}
							widget.handle('element_set', function(event, element) {
								container.empty().append(element);
								container.data('protector').protect(element);
							});
						}, function(widget) {
							if(widget.additional_buttons) {
								var additional_button_pane = preview_bar.find('.additional-buttons');
								var button_prototype = jQuery('<div/>', {'class': 'ui-icon ui-corner-all'});
								jQuery.each(widget.additional_buttons, function(i, button) {
									var button_element = button_prototype.clone().addClass('ui-icon-'+button.icon).click(button.action.bind(widget)).attr('title', button.text);
									additional_button_pane.append(button_element);
								});
							}
							preview_bar.removeClass('loading').addClass('editing');
							container.data('edit_widget', widget);
							container.data('language_object_control', language_object_control);
							// Reposition the bar
							container.position_bar();
						}, result[1]);
					});
				}, control_session_key);
			});
		}).delegate('.cancel', 'click', function() {
			var preview_bar = jQuery(this).closest('.preview_bar');
			var container = preview_bar.data('filled_container');
			container.data('protector').warn(function(ok) {
				if(ok) {
					preview_bar.removeClass('editing').addClass('loading');
					cleanup(preview_bar, container);
				}
			});
		}).delegate('.save', 'click', function(event) {
			var preview_bar = jQuery(this).closest('.preview_bar');
			var container = preview_bar.data('filled_container');
			preview_bar.removeClass('editing').addClass('loading');
			var widget = container.data('edit_widget');
			container.data('edit_widget', null);
			var language_object_control = container.data('language_object_control');
			container.data('language_object_control', null);
			if(widget) {
				language_object_control.save(widget.save(), event.shiftKey, cleanup.bind(this, preview_bar, container));
			} else {
				preview_bar.removeClass('loading').addClass('editing');
			}
		});
	},
	
	//Admin helper methods
	remove_object: function(item_to_remove, force) {
		this.callPageTypeMethod('adminRemoveObject', item_to_remove.attr('data-object-id'), !!force, function(deleted) {
			if(deleted && !force) {
				Widget.types.page_type.types['default'].update_content_properties(item_to_remove, {is_filled_in_current_language: false});
			} else if(deleted) {
				item_to_remove.remove();
			}
		});
	},
	
	edit_object: function(item_to_edit) {
		this.callPageTypeMethod('adminEdit', item_to_edit.attr('data-object-id'), function(control_session_key) {
			Widget.create('language_object_control', function(language_object_control) {
				language_object_control.editor(function(result) {
					Widget.createWithElement(result[0], function(widget) {
						if(widget.setObjectId) {
							widget.setObjectId(item_to_edit.attr('data-object-id'));
						}
				
						widget.handle('element_set', function(event, element) {
							Widget.callStatic('detail', 'clickable_labels_for', element);
							var save = function(is_draft) {
								language_object_control.save(widget.save(), is_draft, function(result, error) {
									//Don’t handle the error, it’s an unprivileged user whose data could not be saved
									Widget.types.page_type.types['default'].update_content_properties(item_to_edit, {is_filled_in_current_language: result.language_object_exists, is_draft: is_draft});
									element.dialog('close');
								});
							};
							var protector = new UnsavedChanges(element);
							var buttons = [{
								text: '{{writeString=wns.save}}',
								'class': 'primary ui-state-highlight',
								click: save.bind(this, false),
								accesskey: 's'
							},
							{
								text: '{{writeString=wns.save_as_draft}}',
								click: save.bind(this, true)
							}];
							if(widget.additional_buttons) {
								jQuery.each(widget.additional_buttons, function(i, button) {
									buttons.push({text: button.text, click: button.action.bind(widget), 'class': 'ui-additional-button', icons: {primary: 'ui-icon-'+button.icon}});
								});
							}
							element.dialog({
								close: function() {
									protector.unprotect(element).release();
									if(widget.destroy) {
										widget.destroy();
									}
									element.dialog('destroy').remove();
								},
								beforeClose: function(event) {
									if(!event.originalEvent) {
										//dialog('close') was called programmatically
										return true;
									}
									protector.warn(function(ok) {
										ok && element.dialog('close');
									});
									return false;
								},
								title: item_to_edit.text(),
								position: ['center', 50],
								// modal: true,
								width: widget.settings.preferred_width || 550,
								// open: function(event, ui){},
								resize: function(event, ui) {
									if(widget.resize_to) {
										widget.resize_to(null, ui.size.height-200);
									}
								},
								buttons: buttons
							});
						});
					}, jQuery.noop, result[1]);
				});
			}, control_session_key);
		});
	},
	
	edit_condition: function(item_to_edit) {
		Widget.create('content_display_condition', function(widget) {
			widget.setContentObjectId(item_to_edit.attr('data-object-id'));
		}, jQuery.noop);
	},
	
	update_content_properties: function(element, properties) {
		var remove_button = element.find('.ui-icon.ui-icon-trash');
		var cls, hd;
		if(properties.is_filled_in_current_language !== undefined) {
			cls = properties.is_filled_in_current_language ? 'removeClass' : 'addClass';
			hd = properties.is_filled_in_current_language ? 'show' : 'hide';
			remove_button[cls]('delete_inactive')[hd]();
			element[cls]('language_object_empty');
		}
		if(properties.is_draft !== undefined) {
			cls = properties.is_draft ? 'addClass' : 'removeClass';
			element[cls]('is_draft');
		}
	},
	
	handle_admin: function(page_id, container, page_type) {
		var pt_default = this;
		var filled_modules = jQuery('<div/>').addClass('filled_modules').appendTo(container);
		var available_modules = jQuery('<ol/>').addClass('available_modules draggable').appendTo(container);
		var delete_drop_zone = jQuery('<div/>').addClass('delete_drop_zone droppable').html("<span>&nbsp;</span>").attr('title', "{{writeString=wns.page.drop_object_all_languages}}").appendTo(container);
		delete_drop_zone.droppable({
			accept: 'li[data-container]',
			activeClass: 'ui-state-draggable',
			hoverClass: 'ui-state-droppable',
			drop: function(event, ui) {
				pt_default.remove_object.call(page_type, ui.draggable, true);
			}
		});
		available_modules.empty();
		filled_modules.empty();
		container.append('<br clear="both" />');
		
		
		// get containers before filling the objects
		page_type.callPageTypeMethod('adminGetContainers', function(container_result) {
			var container_html = container_result.html;
			if(container_html) {
				jQuery.parseHTML(container_html).appendTo(filled_modules);
			}
			if(container_result.css_parsed) {
				filled_modules.addClass('css_parsed');
			} else {
				filled_modules.removeClass('css_parsed');
			}
			var filled_modules_containers = filled_modules.find('ol');			
			var remove_button = jQuery('<span/>').addClass('ui-icon ui-icon-trash').attr('title', "{{writeString=wns.delete_content_object}}").css({'float': "right", cursor: "pointer"});
			var edit_condition_button = jQuery('<span/>').addClass('ui-icon ui-icon-wrench').attr('title', "{{writeString=wns.edit_display_conditions}}").css({'float': "right", cursor: "pointer"});
			var edit_button = jQuery('<span/>').addClass('ui-icon ui-icon-pencil').attr('title', "{{writeString=wns.edit_language_content}}").css({'float':"right", cursor: "pointer"});
			
			// fill existing objects and handle drag and drop and sort
			page_type.callPageTypeMethod('adminListFilledFrontendModules', function(containers) {
				
				// add objects to target container
				jQuery.each(containers, function(container_name, params) {
					var target = filled_modules_containers.filter('[data-container-name='+container_name+']');
					jQuery.each(params.contents, function(i, content) {
						var li = jQuery('<li/>').text(content.object_type_display_name).attr({'data-object-type': content.object_type, 'data-container': container_name, 'data-object-id': content.id}).appendTo(target);
						if(content.content_info) {
							li.attr('title', content.content_info);
						}
						li.prepend(remove_button.clone().click(pt_default.remove_object.bind(page_type, li, false)));
						li.prepend(edit_condition_button.clone().click(pt_default.edit_condition.bind(page_type, li)));
						li.prepend(edit_button.clone().click(pt_default.edit_object.bind(page_type, li)));
						pt_default.update_content_properties(li, {is_filled_in_current_language: content.content_info !== false, is_draft: content.is_draft});
					});
				});
			
				filled_modules_containers.sortable({
					connectWith: filled_modules.find('ol'),
					helper: 'clone',
					update: function(event, ui) {
						if(ui.sender) {
							return;
						}
						var item = ui.item;
						// get final target (not original one)
						var target = jQuery(item).parent();
						var position = target.children().index(item);
						
						// just move within container
						if(target.attr('data-container-name') === item.attr('data-container')) {
							page_type.callPageTypeMethod('adminMoveObject', item.attr('data-object-id'), position);
							return;
						}
						// move to container and resort
						if(item.attr('data-container')) {
							item.attr('data-container', target.attr('data-container-name'));
							page_type.callPageTypeMethod('adminMoveObject', item.attr('data-object-id'), position, target.attr('data-container-name'));
							return;
						}
						// add new object, prepare for delete
						item.attr('data-container', target.attr('data-container-name'));
						page_type.callPageTypeMethod('adminAddObjectToContainer', target.attr('data-container-name'), item.attr('data-object-type'), position, function(object_id) {
							item.attr('data-object-id', object_id);
							item.prepend(remove_button.clone().click(pt_default.remove_object.bind(page_type, item, false)));
							item.prepend(edit_condition_button.clone().click(pt_default.edit_condition.bind(page_type, item)));
							item.prepend(edit_button.clone().click(pt_default.edit_object.bind(page_type, item)));
							pt_default.update_content_properties(item, {is_filled_in_current_language: false});
						});
					}
				});
			});
			page_type.callPageTypeMethod('adminListPossibleFrontendModules', function(modules) {
				var dragOptions = {
					cursor: "move",
					helper: 'clone',
					connectToSortable: filled_modules_containers
				};
				jQuery.each(modules, function(object_type, module_name) {
					var element = jQuery('<li/>').text(module_name).attr('data-object-type', object_type).draggable(dragOptions).sortable();
					element.appendTo(available_modules);
					// not yet but soon		jQuery('<span/>').addClass('handle').appendTo(element);
				});
			});
		});
	}
};
