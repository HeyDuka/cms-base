(function($) {
	var originalFix = $.event.fix;
	$.event.fix = function(event) {
		event = originalFix.call(this, event);
		if(event.originalEvent && (event.type.indexOf('drag') === 0 || event.type.indexOf('drop') === 0)) {
			event.dataTransfer = event.originalEvent.dataTransfer;
		}
		return event;
	};
})(jQuery);

Widget.types.file_upload = {
	allow_drag_to: function(element, selector, callback, single_file_only) {
		var file_upload = this;
		var current_drag_is_file = false;
		element.bind('dragenter', function(event) {
			current_drag_is_file = event.dataTransfer.files !== null || event.dataTransfer.types.contains("Files");
			if(single_file_only && event.dataTransfer.files && event.dataTransfer.files.length > 1) {
				current_drag_is_file = false;
			}
			if(!selector) {
				element.addClass('ui-state-droppable');
			}
		}).bind('dragover', function(event) {
			if(!selector) {
				event.originalEvent.preventDefault();
				return false;
			}
			if(!current_drag_is_file) {
				return;
			}
			var target = jQuery(event.target);
			if(!target.is(selector)) {
				return;
			}
			element.find(selector).removeClass('ui-state-droppable');
			target.addClass('ui-state-droppable');
			event.originalEvent.preventDefault();
			return false;
		}).bind('dragleave', function(event) {
			if(selector) {
				element.find(selector).removeClass('ui-state-droppable');
			} else {
				element.removeClass('ui-state-droppable');
			}
		}).bind('drop', function(event) {
			if(single_file_only && event.dataTransfer.files.length > 1) {
				return false;
			}
			if(!current_drag_is_file || event.dataTransfer.files.length < 1) {
				Widget.notifyUser('info', '{{writeString=wns.file_upload.dropped_element_is_not_file}}');
				return false;
			}
			var target = jQuery(event.target);
			
			var i = 0;
			for(i=0;i<event.dataTransfer.files.length;i++) {
				file_upload.upload_file(event.dataTransfer.files.item(i), callback(target));
			}
			
			current_drag_is_file = false;
			return false;
		});
	},
	
	upload_file: function(file) {
		var options = {document_category_id: null, is_protected: false, language_id: null, document_id: null, name: file.name, type: file.type, callback: jQuery.noop};
		jQuery.extend(options, arguments[1] || {});
		this.accepts(file.name, file.type, function(result, error) {
			if(error) {
				if(options.unacceptable) {
					options.unacceptable(error);
				} else {
					var _this = this;
					jQuery('<div/>').text(error.message).dialog({buttons: {
						"{{writeString=wns.document_type.allow}}": function() {
							jQuery(this).dialog("close");
							_this.do_upload(file, options, true);
						},
						"{{writeString=wns.cancel}}": function() {
							jQuery(this).dialog("close");
						}
					}});
				}
			} else {
				this.do_upload(file, options);
			}
		});
	},
	
	do_upload: function(file, options, create_type) {
		var file_uploader = this;
		var fileReader = new FileReader();
		var size = file.size;
		var notification = jQuery(document.createElement('div')).text('{{writeString=wns.upload_status}} '+(parseInt(size/1024, 10))+' KiB');
		var progress = jQuery('<div/>').progressbar({value: 0}).appendTo(notification);
		notification = Widget.notifyUser('info', notification, {closeDelay: null});
		fileReader.onload = function() {
			file_uploader.uploadFile(window.btoa(fileReader.result), options, create_type, WidgetJSONOptions.with_upload_progess_callback(function(event) {
				progress.progressbar('value', (event.loaded/size)*100);
			}), function(result, error) {
				if(!error) {
					progress.progressbar('value', 100);
					notification.enable_close_button();
					notification.reset_timeout(3000);
					Widget.notifyUser('info', '{{writeString=wns.upload_success}}', {identifier: 'cmos.file_uploaded.into.'+options.document_category_id, closable: true});
					this.fire('file-uploaded', result);
					options.callback(result);
				} else {
					notification.enable_close_button();
					notification.reset_timeout(3000);
					notification.set_severity('error');
					options.error ? options.error(error, notification) : notification.set_message(error.message);
				}
			});
		};
		fileReader.readAsBinaryString(file);
	}
};