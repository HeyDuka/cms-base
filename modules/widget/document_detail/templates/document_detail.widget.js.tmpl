Widget.types.document_detail = {
	initialize: function() {
		var _this = this;
		
		this.content = Widget.parseHTML("{{includeTemplate=edit}}");
		this.content.find('div.hide_if_not_saved').hide();
		this.file_upload = this.content.find("input[name='file_upload']");
		this.uploader = Widget.create('file_upload');
		this.current_detail_id = null;
					
		this.settings.hidden_inputs = this.settings.hidden_inputs.concat(this.settings.is_called_externally ? this.settings.externally_hidden_inputs : []);
		jQuery.each(_this.settings.hidden_inputs, function(i, input_name) {
			var input = _this.content.find(":input[name='" + input_name + "']");
			if(input.is('select, textarea, button')) {
				var new_input = jQuery('<input type="hidden"/>').attr('name', input_name);
				input.replaceWith(new_input);
				input = new_input;
			}
			input.hide();
			_this.content.find("label[for='" + input_name + "']").remove();
		});
			
		this.content.find("select[name='document_category_id']").prepareWidget(function(category_widget) {
			category_widget.settings.initial_selection = _this.settings.initial_category_id;
			category_widget.settings.show_all = false;
			category_widget.settings.show_without	= true;
		}, jQuery.noop);
		this.content.find("select[name='language_id']").prepareWidget();
		this.content.find('input[name=content_created_at]').datepicker({dateFormat: 'dd.mm.yy'});
		this.content.find('input[name=license]').attr('data-widget-session', _this.settings.popover).prepareWidget(function(popover) {
			popover.handle('popover-chosen', function(event, chosen) {
				popover._element.val(chosen.children('img').data('license'));
			});
		});
		
		Widget.createWithElement('tag_area', function(widget) {
			_this.tag_area = widget;
			widget.settings.auto_load = false;
			widget.settings.dnd = false;
			widget.settings.deletable = true;
			widget.setModelName('Document');
			widget.handle('element_set', function(event, element) {
				_this.content.find('div.tags_in_detail').append(element);
			});
		}, jQuery.noop);
			
		this.uploader.allow_drag_to(_this.content, null, function(target) {
			return {document_id: _this.current_detail_id, callback: _this.upload_success.bind(_this), error: _this.upload_error.bind(_this), deny_name_override: true};
		}, true);

		this.file_upload.change(function(event) {
			_this.detail_widget.clear_validation();
		});
		
		Widget.callStatic('detail', 'create_for_instance', this);			
		this.handle('opened', function() { 
			var old_save_handler = this.detail_widget.settings.save_callback;
			this.detail_widget.settings.save_callback = function() {
				if(_this.file_upload.val()) {
					var file = _this.file_upload[0].files[0];
					_this.file_upload.attr('disabled', true);
					_this.uploader.upload_file(file, {document_id: _this.current_detail_id, callback: function(result) {
						_this.upload_success(result, true);
						_this.settings.remains_open = true;
						old_save_handler.call(_this.detail_widget);
					}, error: _this.upload_error.bind(_this)});
				} else {
					_this.settings.remains_open = false;
					old_save_handler.call(this);
				}
			};		
		});
	},

	fill_data: function(upload_mode) {
		this.detail_widget.disable();
		this.documentData(function(document_data) {
			this.content.find(".preview").text('').addClass('file_exists');
			this.preview(function(result) {
				this.content.find(".preview").html(result);
			});
			this.content.find('div.hide_if_not_saved').show();
			this.content.find(".updated_info").text(document_data.UpdatedInfo);
			this.content.find(".created_info").text(document_data.CreatedInfo);
			this.content.find('div.hide_if_not_saved').show();
			this.content.find(".detail_id").text(document_data.Id);
			this.content.find(".file_size").text(document_data.FileInfo);
			this.content.find(".original_name").text(document_data.OriginalName === null ? document_data.Name : document_data.OriginalName);
			this.content.find(".ui-download-document").attr({ href: FILE_PREFIX+'/display_document/'+document_data.Id+'?download=true' });
			
			if(upload_mode) {
				if(!jQuery.trim(this.content.find("input[name='name']").val())) {
					this.content.find("input[name='name']").val(document_data.Name);
				}
			} else {
				if(document_data.DocumentCategoryId === null) {
					document_data.DocumentCategoryId = '';
				}
				if(document_data.LanguageId === null) {
					document_data.LanguageId = '';
				}
				if(document_data.Id !== null) {
					this.content.find("label[for='file_upload']").text("{{writeString=wns.document.file_upload_replace}}");
				}
				this.content.find(":input[name='name']").val(document_data.Name);
				this.content.find(":input[name='description']").val(document_data.Description);
				this.content.find(":input[name='document_category_id']").val(document_data.DocumentCategoryId);
				this.content.find(":input[name='language_id']").val(document_data.LanguageId || '');
				this.content.find(":input[name='is_protected']").prop('checked', document_data.IsProtected);
				this.content.find(":input[name='is_inactive']").prop('checked', document_data.IsInactive);
				this.content.find(":input[name='author']").val(document_data.Author);
				this.content.find(":input[name='license']").val(document_data.License);
				this.content.find(":input[name='content_created_at']").val(document_data.ContentCreatedAt);
				this.current_detail_id = document_data.Id;
				this.detail_widget.set_title(this.detail_widget.settings.title = "{{writeString=wns.document}}"+' '+document_data.Name);
			}
			if(document_data.Id) {
				this.tag_area.setTaggedItemId(document_data.Id);
				this.tag_area.reload_tags();
			}
			this.detail_widget.enable();
		});
	},

	upload_error: function(error) {
		this.file_upload.attr('disabled', false);
		if(error && !error.reporting_done) {
			this.detail_widget.validate_with({upload: {string: Widget.parseHTML('<span class="error_display"/>').text(error.message)}});
		}
	},
	
	upload_success: function(result, no_reload) {
		this.upload_error();
		this.file_upload.val('');
		var is_new = this.current_detail_id === null;
		if(is_new) {
			this.setDocumentId(result);
			this.current_detail_id = result;
			this.save(true);
		}
		// check rafi
		if(no_reload) {
			this.fill_data(is_new ? 'new' : 'existing');
		}
		//TODO: reload list row
	},	
	
	save: function(should_remain_open) {
		if(should_remain_open) {
			this.settings.remains_open = true;
		}
		this.detail_widget.settings.save_callback();
		if(should_remain_open) {
			this.settings.remains_open = false;
		}
	},
	
	settings: {
		detail_widget: {
			title: "{{writeString=wns.new_entry}}",
			width: 600,
			dialogClass: "detail-widget document_detail"
		},
		initial_category_id: null,
		is_called_externally: false,
		externally_hidden_inputs: ['document_category_id', 'is_protected'],
		hidden_inputs: []
	}
};
