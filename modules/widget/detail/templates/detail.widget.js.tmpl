Widget.types.detail = {
	initialize: function() {
		this.loader = jQuery('<div/>').addClass('ui-loading');
	},
	
	open: function(requires_data, enclosing_widget) {
		// as a second argument the widget is required for filling the data
		if(requires_data && enclosing_widget && enclosing_widget instanceof Widget) {
			console.log(requires_data, arguments);
			arguments[1].fill_data();
		}

		if(this.has_dialog) {
			this.content.dialog('open');
			this.select();
			return;
		}
		this.loader.appendTo(this.content).hide();
		var detail_widget = this;
		var save_button_handler = this.settings.save_callback;
		var cancel_callback = function() {
			detail_widget.content.dialog('close');
		};
		var buttons = {
			"{{writeString=widget.save}}": save_button_handler
		};
		if(this.settings.has_cancel_button) {
			buttons["{{writeString=widget.cancel}}"] = cancel_callback;
		}
		this.content.dialog({
			title: this.settings.title,
			autoOpen: this.settings.autoOpen,
			modal: this.settings.modal,
			resizable: this.settings.resizable,
			closeOnEscape: this.settings.closeOnEscape,
			dialogClass: this.settings.dialogClass,
			width: this.settings.width,
			buttons: buttons
		}).dialog('open').bind('keydown', function(event) {
			if(event.which === 13) {
				// TODO: check if is textarea or whatever
				save_button_handler();
				return false;
			}
		}).find('label[for]').bind('click', function() {
			var related_input = detail_widget.content.find("*[name='"+jQuery(this).attr('for')+"']");
			related_input.focus();
			if(related_input.is(':checkbox, :radio') && related_input.attr('disabled') == false) {
				related_input.attr('checked', !related_input.attr('checked'));
			} else {
				related_input.select();
			}
		});
		this.select();
		this.has_dialog = true;
	},
	
	close: function() {
		this.content.dialog('close');
	},
	
	clear_validation: function() {
		this.content.find('.error_display').remove();
	},
	
	validate_with: function(errors) {
		this.clear_validation();
		var detail = this;
		jQuery.each(errors, function(key, message) {
			if(message.constructor === String) {
				message = jQuery.parseHTML(message);
			}
			detail.content.find('.validate-'+key.escapeSelector()).after(message);
		});
	},
	
	has_dialog: false,
	content: null,
	
	select: function() {
		if(this.settings.select) {
			this.content.find(this.settings.select).select();
		}
	},
	
	fill_select: function(element, data) {
		element.empty();
		var option = jQuery('<option/>');
		option.clone().text('-----').attr('value', '').appendTo(element);
		jQuery.each(data, function(i, detail) {
			option.clone().text(detail.name).attr('value', detail.id).appendTo(element);
		});
	},
	
	set_title: function(title) {
		this.content.dialog('option', 'title', title);
	}, 
	
	set_is_loading: function(is_loading) {
		if(is_loading) {
			this.loader.show();
			this.content.children().css("visibility", "hidden");
			// this.content.children().hide();
		} else {
			this.loader.hide();
			this.content.children().css("visibility", "visible");
			// this.content.children().show();
		}
	},
	
	connect_detail_with_list: function(detail_name, list, idMethod, idData) {
		if(!idMethod) idMethod = 'setId';
		if(!idData) idData = 'id';
		list.settings.row_click_active_mode = 'activate';
		list.settings.row_click_active_class = 'ui-state-highlight';
		Widget.create(detail_name+"_detail", function(detail) {
			list.handle('list.row-dblclick', function(event, rowIndex, row) {
				//Init
				var cell = jQuery(event.realTarget).closest('.ui-list-cell');
				var row = cell.closest('.ui-list-row');
				var cellIndex = row.find('.ui-list-cell').index(cell);
				var col_schema = list.schema_for_col(cellIndex);
				if(col_schema.has_function) {
					return;
				}
				
				detail[idMethod](row.data(idData));
				detail.current_row = row;
				detail.fill_data();
				detail.open();
				event.preventDefault();
				event.stopPropagation();
			});
			detail.save_callback = function(returnValue) {
				var additionalData = jQuery.isPlainObject(returnValue) ? returnValue : {};
				list.update_row(detail.current_row, additionalData);
				detail.close();
			};
		});
	},
	
	settings: {
		title: 'Â ',
		autoOpen: true,
		modal: false,
		resizable: true,
		closeOnEscape: true,
		has_cancel_button: true,
		cancel_callback: jQuery.noop,
		save_callback: jQuery.noop,
		select: "input:eq(0)",
		width: 480
	}
};