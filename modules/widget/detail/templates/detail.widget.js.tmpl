Widget.types.detail = {
	initialize: function() {
		this.loader = jQuery('<div/>').addClass('ui-loading');
	},
	
	set_instance: function(instance) {
		if(this === Widget.types.detail.prototype) {
			//Static call means do the whole initialisation
			var prototype = Object.getPrototypeOf(instance);
			var instance_props = jQuery.extend({
				open: function() {
					if(!this.detail_widget) {
						this.auto_open = true;
						return false;
					}
					this.detail_widget.open();
				},

				close: function() {
					this.detail_widget.close();
					this.close_callback();
				},

				close_callback: jQuery.noop,
				save_callback: jQuery.noop
			}, prototype);
			jQuery.extend(prototype, instance_props);
			Widget.create('detail', function(detail) {
				detail.set_instance(instance);
				jQuery.extend(detail.settings, instance.settings.detail_widget);
				if(instance.auto_open) {
					detail.open();
				}
			});
			return;
		}
		var _this = this;
		this.instance = instance;
		instance.detail_widget = this;
		this.content = instance.content || instance._element;
		this.settings.save_callback = function() {
			var data = _this.content.serializeArrayKV();
			instance.fire('saving', data);
			var remains_open = instance.settings.remains_open;
			instance.saveData(data, function() {
				instance.save_callback && instance.save_callback.apply(instance, jQuery.makeArray(arguments));
				if(!remains_open) {
					instance.close();
				}
				instance.fire.apply(instance, ['saved'].concat(jQuery.makeArray(arguments)));
				var detail_name = instance.widgetType.replace('_detail', '');
				Widget.fire(detail_name+'-saved');
			});
		};
		if(this.has_dialog) {
			this.content.dialog('option', 'dialogClass', this.content.dialog('option', 'dialogClass')+" detail-widget-"+instance._type);
		} else {
			this.settings.dialogClass = this.settings.dialogClass+" detail-widget-"+instance._type;
		}
		this.settings.cancel_callback = instance.close.bind(instance);
		
		var old_fill_data = instance.fill_data;
		instance.fill_data = function() {
			_this.clear_validation();
			old_fill_data.apply(instance, jQuery.makeArray(arguments));
		};
		
		return this;
	},
	
	save: function() {
		if(this.content.is('form')) {
			this.content.submit();
		} else {
			this.settings.save_callback();
		}
	},
	
	open: function() {
		this.fire('opening');
		if(this.has_dialog) {
			this.clear_validation();
			this.content.dialog('open');
			this.select();
			return;
		}
		this.fire('opening-initial');
		this.loader.appendTo(this.content).hide();
		var detail_widget = this;
		var buttons = [
			{
				text: "{{writeString=wns.save}}",
				'class': 'primary ui-state-highlight',
				click: this.save.bind(this)
			}
		];
		this.settings.has_cancel_button && buttons.push({
			text: "{{writeString=wns.cancel}}",
			'class': 'secondary',
			click: this.settings.cancel_callback
		});
		// option something like.....
		
		if(this.content.is('form')) {
			this.content.submit(function() {
				detail_widget.settings.save_callback();
				return false;
			});
		}
		
		this.content.dialog({
			title: this.settings.title,
			autoOpen: this.settings.autoOpen,
			modal: this.settings.modal,
			resizable: this.settings.resizable,
			closeOnEscape: this.settings.closeOnEscape,
			dialogClass: this.settings.dialogClass,
			width: this.settings.width,
			height: this.settings.height,
			buttons: buttons,
			position: ['center', 50]
		}).dialog('open').bind('keydown', function(event) {
			if(event.which === 13) {
				if(!jQuery(event.target).is('textarea')) {
					detail_widget.save();
					return false;
				}
			}
		});
		this.clickable_labels_for(this.content);
		this.select();
		this.has_dialog = true;
	},
	
	close: function() {
		this.content.dialog('close');
	},
	
	has_dialog: false,
	content: null,
	
	select: function() {
		if(this.settings.select) {
			this.content.find(this.settings.select).select();
		}
	},
	
	set_title: function(title) {
		if(!title) {
			return;
		}
		this.settings.title = title;
		if(this.has_dialog) {
			this.content.dialog('option', 'title', title);
		}
	}, 
	
	set_is_loading: function(is_loading) {
		if(is_loading) {
			this.loader.show();
			this.content.children().css("visibility", "hidden");
		} else {
			this.loader.hide();
			this.content.children().css("visibility", "visible");
		}
	},
	
	//Static methods
	
	
	tabs_for: function(element) {
		//Static call means this points to the prototype
		var parent = this !== Widget.types.detail.prototype ? this.content : arguments[1];
		var current_element = element;
		var result = [];
		while(current_element.length && current_element[0] !== parent[0]) {
			if(current_element.is('.ui-accordion-content')) {
				result.push.apply(result, current_element.prev().get());
			} 
			if(current_element.is('.ui-tabs-panel')) {
				result.push.apply(result, current_element.parent().find('a[href="'+'#'+current_element.attr('id')+'"]').parent().get());
			}
		 current_element = current_element.parent();
		}
		return jQuery(result);
	},
	
	clear_validation: function() {
		//Static call means this points to the prototype
		var element = this !== Widget.types.detail.prototype ? this.content : arguments[0];
		element.find('.error_display').remove();
		element.find('.error_display_indicator').removeClass("error_display_indicator");
	},
	
	validate_with: function(errors) {
		//Static call means this points to the prototype
		var element = this !== Widget.types.detail.prototype ? this.content : arguments[1];
		Widget.callStatic('detail', 'clear_validation', element);
		jQuery.each(errors, function(key, parameters) {
			var message = parameters.string;
			if(!message) {
				return;
			}
			if(message.constructor === String) {
				message = jQuery.parseHTML(message);
			}
			element.find('.validate-'+key.escapeSelector()).each(function(index) {
				if(!parameters.affected_instance_indexes || parameters.affected_instance_indexes.indexOf(index) > -1) {
					var validate_element = jQuery(this);
					Widget.callStatic('detail', 'tabs_for', validate_element, element).addClass('error_display_indicator');
					validate_element.append(message.clone());
				}
			});
		});
	},
	
	clickable_labels_for: function(element) {
		element.delegate('label[for]', 'click', function() {
			var label = jQuery(this);
			var related_input = element.find('*[name="'+label.attr('for')+'"]');
			if(related_input.length > 1) {
				var all_inputs = related_input.get();
				var calculate_score = function(input) {
					var score = 0;
					if(input.parentNode == label[0].parentNode) {
						score += 100;
						score -= 10*Math.abs(jQuery.makeArray(input.parentNode.childNodes).indexOf(label[0])-jQuery.makeArray(input.parentNode.childNodes).indexOf(input));
					} else {
						var element_parents = jQuery(input).parents();
						var label_parents = label.parents();
						score -= (element_parents.not(label_parents).length + label_parents.not(element_parents).length)/2;
					}
					return score;
				};
				all_inputs.sort(function(a, b) {
					return calculate_score(b) - calculate_score(a);
				});
				related_input = jQuery(all_inputs[0]);
			}
			related_input.focus();
			if(related_input.is(':checkbox, :radio') && related_input.prop('disabled') === false) {
				related_input.prop('checked', !related_input.prop('checked'));
				related_input.change();
			} else {
				related_input.select();
			}
		});
	},
	
	connect_detail_with_list: function(detail_name, list, idMethod, idData, options) {
		if(!idMethod) idMethod = 'setId';
		if(!idData) idData = 'id';
		options = jQuery.extend({
			colName: false,
			eventName: 'dblclick'
		}, (options || {}));
		options.eventName = 'list.'+(options.colName ? 'cell' : 'row')+'-'+options.eventName;
		list.settings.row_click_active_mode = 'activate';
		list.settings.row_click_active_class = 'ui-state-highlight';
		Widget.create(detail_name+"_detail", function(detail) {
			list.handle(options.eventName, function(event, rowIndex, col, row, cell) {
				if(options.colName && col.identifier !== options.colName) {
					return;
				}
				//Init
				var cell = jQuery(event.realTarget).closest('.ui-list-cell');
				var row = cell.closest('.ui-list-row');
				var cellIndex = row.find('.ui-list-cell').index(cell);
				var col_schema = list.schema_for_col(cellIndex);
				if(col_schema.has_function) {
					return;
				}
				
				detail[idMethod](row.data(idData));
				detail.current_row = row;
				detail.fill_data();
				detail.open();
				event.preventDefault();
				event.stopPropagation();
			});
			detail.save_callback = function(returnValue) {
				var additionalData = jQuery.isPlainObject(returnValue) ? returnValue : {};
				list.update_row(detail.current_row, additionalData);
			};
		});
	},
	
	settings: {
		title: 'Â ',
		autoOpen: true,
		modal: false,
		resizable: true,
		closeOnEscape: true,
		has_cancel_button: true,
		auto_close_on_save: true,
		cancel_callback: jQuery.noop,
		save_callback: jQuery.noop,
		select: "input:eq(0)",
		width: 480,
		dialogClass: 'detail-widget',
		height: 'auto'
	}
};
