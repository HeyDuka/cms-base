Widget.types.page_detail = {
	prepare: function() {
		// templates
		var option = jQuery('<option/>');
		var template_select = this._element.find("select[name='template_name']");
		jQuery.each(this.getFrontendTemplates(), function(i, template) {
			option.clone().text(template.name).attr('value', template.value).appendTo(template_select);
		}.bind(this));
		var page_type_select = this._element.find("select[name='page_type']");
		jQuery.each(this.getPageTypes(), function(i, page_type) {
			option.clone().text(page_type.name).attr('value', page_type.value).appendTo(page_type_select);
		}.bind(this));
		this.disable_input();
	},
	
	disable_input: function() {
		this._element.find('input, textarea, button').attr('disabled', 'disabled');
	},
	
	enable_input: function() {
		this._element.find('input, textarea, button').attr('disabled', null);
	},
	
	load_page: function(page_id) {
		this.setPageId(page_id);
		this.fill_data();
		this.enable_input();
	},
	
	fill_data: function() {
		this.getPageData(function(page_data) {
			this._element.find("input[name='name']").val(page_data.Name);
			this._element.find("input[name='link_text']").val(page_data.active_page_string.LinkTextOnly);
			this._element.find("input[name='page_title']").val(page_data.active_page_string.PageTitle);
			this._element.find("input[name='is_inactive']").attr('checked', !page_data.IsInactive);
			this._element.find("input[name='is_folder']").attr('checked', page_data.IsFolder);
			this._element.find("input[name='is_hidden']").attr('checked', page_data.IsHidden);
			this._element.find("input[name='is_protected']").attr('checked', page_data.IsProtected);
			this._element.find("select[name='template_name']").val(page_data.TemplateName == null ? "" : page_data.TemplateName);
			this._element.find("select[name='page_type']").val(page_data.PageType == null ? "" : page_data.PageType);
			this._element.find(".page_href").text(page_data.PageHref);

			// references
			var count_text = page_data.CountReferences > 0 ? " ("+page_data.CountReferences+")" : '';
			this._element.find(".references_count").text(count_text);

			// page_properties
			var page_properties_container = this._element.find(".page_properties_container");
			var legend = page_properties_container.find('legend');
			page_properties_container.empty();
			if(page_data.page_properties) {
				page_properties_container.append(jQuery('<legend>').text("{{writeString=widget.page.page_properties}}"));
			}
			var default_name = "{{writeString=widget.default}}";
			for(property_name in page_data.page_properties) {
				var property_container = jQuery("<div/>");
				property_container.append(jQuery('<label/>').text(property_name).attr("for", property_name));
				for(name in page_data.page_properties[property_name]) {
					if(name === 'value') {
						property_container.append(jQuery('<input/>').attr({"name": property_name, "class" : 'ui-widget-content', "value": page_data.page_properties[property_name][name], 'style' : 'background-color:'+page_data.page_properties[property_name][name]+';'}));
					}
					if(name === 'default') {
						property_container.append(jQuery('<span/>').text(default_name+": "+page_data.page_properties[property_name][name]));
					}
				}
				page_properties_container.append(property_container);
			}
		});
	},
	
	save: function() {
		this.saveData(this._element.serializeArrayKV(), function() {
			this.fill_data();
			this.fire('saved');
		});
	},
	
	settings: {
		
	}
};
