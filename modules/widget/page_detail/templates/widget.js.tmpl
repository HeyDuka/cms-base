Widget.types.page_detail = {
	prepare: function() {
		var widget = this;
		// templates
		var option = jQuery('<option/>');
		var template_select = this._element.find("select[name='template_name']");
		jQuery.each(this.getFrontendTemplates(), function(i, template) {
			option.clone().text(template.name).attr('value', template.value).appendTo(template_select);
		}.bind(this));
		var page_type_select = this._element.find("select[name='page_type']");
		jQuery.each(this.getPageTypes(), function(i, page_type) {
			option.clone().text(page_type.name).attr('value', page_type.value).appendTo(page_type_select);
		}.bind(this));
		this.disable_input();
		this._element.find('label[for]').bind('click', function() {
			var related_input = widget._element.find("*[name='"+jQuery(this).attr('for')+"']");
			related_input.focus();
			if(related_input.is(':checkbox, :radio')) {
				related_input.attr('checked', !related_input.attr('checked'));
			} else {
				related_input.select();
			}
		});
	},
	
	disable_input: function() {
		this._element.find('input, textarea, button').attr('disabled', 'disabled');
	},
	
	enable_input: function() {
		this._element.find('input, textarea, button').attr('disabled', null);
	},
	
	load_page: function(page_id) {
		this.setPageId(page_id);
		this.fill_data();
		this.enable_input();
	},
	
	fill_data: function() {
		this.getPageData(function(page_data) {
			this.current_page_id = page_data.Id;
			this._element.find("input[name='name']").val(page_data.Name);
			this._element.find("input[name='link_text']").val(page_data.active_page_string.LinkTextOnly);
			this._element.find("input[name='page_title']").val(page_data.active_page_string.PageTitle);
			this._element.find("input[name='is_inactive']").attr('checked', !page_data.IsInactive);
			this._element.find("input[name='is_folder']").attr('checked', page_data.IsFolder);
			this._element.find("input[name='is_hidden']").attr('checked', page_data.IsHidden);
			this._element.find("input[name='is_protected']").attr('checked', page_data.IsProtected);
			this._element.find("select[name='template_name']").val(page_data.TemplateName == null ? "" : page_data.TemplateName);
			this._element.find("select[name='page_type']").val(page_data.PageType == null ? "" : page_data.PageType);
			this._element.find(".page_href").text(page_data.PageHref).attr('href', page_data.PageHref);

			// references
			var count_text = page_data.CountReferences > 0 ? " ("+page_data.CountReferences+")" : '';
			this._element.find(".references_count").text(count_text);
			
			// content_containers
			var contents_container = this._element.find(".contents_container");
			contents_container.empty();
			for(container_name in page_data.container_contents) {
				var container_section = jQuery('<div>').addClass('container '+container_name).attr("title", container_name);
				// console.log(page_data.container_contents[container_name]['inherit_info']);
				if(page_data.container_contents[container_name]['inherit_info']) {
					var title_content = jQuery('<h4>');
					title_content.append(jQuery('<a>').text(page_data.container_contents[container_name]['inherit_info']).attr('href', page_data.container_contents[container_name]['inherit_info_href']));
					container_section.append(title_content);
				} 
				for(param in page_data.container_contents[container_name]) {
					if(param === 'contents') {
						if(page_data.container_contents[container_name][param] !== null) {
							for(object_id in page_data.container_contents[container_name][param]) {
								var object_info = page_data.container_contents[container_name][param][object_id]['content_type'];
								if(page_data.container_contents[container_name][param][object_id]['content_info']) {
									object_info = object_info+' ('+page_data.container_contents[container_name][param][object_id]['content_info']+')';
								}
								container_section.append(jQuery('<div>').text(object_info));
							}
						} else {
							container_section.append(jQuery('<div>').text('No contents'));
						}
					} else if(param === 'module_options') {
						var module_options = jQuery('<select>').attr('name', 'module_options_'+container_name);
						for(module_name in page_data.container_contents[container_name][param]) {
							var option = jQuery('<option>').text(page_data.container_contents[container_name][param][module_name]).attr('value', module_name);
							module_options.append(option);
						}
						container_section.append(jQuery('<br>'));
						container_section.append(module_options);
					}	
				}
				contents_container.append(container_section);
			}

			// page_properties
			if(page_data.page_properties != undefined) {
				var page_properties_container = this._element.find(".page_properties.container");
				page_properties_container.empty();
				var default_name = "{{writeString=widget.default}}";
				for(property_name in page_data.page_properties) {
					var property_container = jQuery("<div/>");
					property_container.append(jQuery('<label/>').text(property_name.substring(page_data.NameSpace.length)).attr("for", property_name));
					for(name in page_data.page_properties[property_name]) {
						if(name === 'value') {
							var background_color  ='';
							if(page_data.page_properties[property_name]['type'] == 'color') {
								background_color = page_data.page_properties[property_name][name] != '' ? page_data.page_properties[property_name][name] : page_data.page_properties[property_name]['default']
							}
							var type_class = page_data.page_properties[property_name]['type'] ? ' '+page_data.page_properties[property_name]['type'] : '';
							var property_input = jQuery('<input/>').attr({"name": property_name, "class" : 'ui-widget-content'+type_class, "value": page_data.page_properties[property_name][name], 'style' : 'background-color:'+background_color+';'});
							property_container.append(property_input);
						}
						if(name === 'default') {
							property_container.append(jQuery('<span/>').text(default_name+": "+page_data.page_properties[property_name][name]));
						}
					}
					page_properties_container.append(property_container);
					page_properties_container.attr('style' , 'display:block;');
				} 
			}	else {
				// remove properties if not exists
				this._element.find(".page_properties").remove();
			}
		});
	},
	
	delete: function() {
		this.deletePage();
	},
	
	save: function() {
		this.saveData(this._element.serializeArrayKV(), function() {
			this.fill_data();
			this.fire('saved');
		});
	},
	
	settings: {
		
	}
};
