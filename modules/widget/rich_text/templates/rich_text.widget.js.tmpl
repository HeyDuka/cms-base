Widget.types.rich_text = {
	settings: {
		customConfig: '',
		toolbar_Full: [
			['Bold','Italic','-','Subscript','Superscript'],
			['Link','Unlink','Anchor'],
			['NumberedList','BulletedList','Blockquote'],
			['Undo','Redo','-','Find','-','RemoveFormat', 'Scayt', 'ShowBlocks'],
			['Maximize'],
			'/',
			['Styles','Format'],
			['Image','HorizontalRule','Smiley','SpecialChar'],
			['Source'],
		],
		skin: "kama",
		entities: false,
		baseFloatZIndex: 1020,
		resize_enabled: false,
		height: 200
	},
	
	initialize: function() {
		var _this = this;
		CKEDITOR.on('dialogDefinition', function(ev) {
			var dialogName = ev.data.name;
			var dialogDefinition = ev.data.definition;
			if(dialogName == 'image') {
				var picker_tab = dialogDefinition.addContents({
					id : 'picker',
					label : '{{writeString=richtext.image_picker}}',
					accessKey : 'P',
					elements : [
						{
							html: '<div></div>',
							id : 'picker_field',
							type : 'html'
						}
					]
				});
				dialogDefinition.onLoad = CKEDITOR.tools.override(dialogDefinition.onLoad, function(orig) {
					return function() {
						var dialog = this;
						var picker_field = this.getContentElement('picker', 'picker_field');
						var element = jQuery(picker_field.getElement().$);
						element.attr('data-widget-type', 'image_picker').prepareWidget(function(widget) {
							widget.set_callback(function(image_id) {
								dialog.setValueOf('info', 'txtUrl', widget.document_url_from_id(image_id));
								dialog.selectPage('info');
							});
						});
						return orig.apply(this, arguments);
					};
				});
			} else if(dialogName == 'link') {
				var infoTab = dialogDefinition.getContents('info');
				var linkType = infoTab.get('linkType');
				linkType.items.unshift(['{{writeString=widget.richtext.document_link}}', 'document']);
				linkType.items.unshift(['{{writeString=widget.richtext.external_link}}', 'external']);
				linkType.items.unshift(['{{writeString=widget.richtext.internal_link}}', 'internal']);
				content.setup = function(data) {
					if (!data.type || (data.type == 'url') && !data.url) {
						data.type = 'drupal';
					}
					else if (data.url && !data.url.protocol && data.url.url) {
						var path = extractPath(data.url.url);
						if (path) {
							data.type = 'drupal';
							data.drupal_path = path;
							delete data.url;
						}
					}
					this.setValue(data.type);
				};
				content.commit = function(data) {
					data.type = this.getValue();
					console.log('commiting', data, ':', data.type)
					if (data.type == 'document' || data.type == 'external' || data.type == 'internal') {
						data.type = 'url';
					}
				};
				linkType.onChange = CKEDITOR.tools.override(linkType.onChange, function(orig) {
					return function() {
						orig.apply(this, arguments);
						var dialog = this.getDialog();
						
						var internal_link_chooser = dialog.getContentElement('info', 'internal_link_chooser');
						var internal_link_chooser_element = jQuery(internal_link_chooser.getElement().getParent().getParent().$);
						var external_link_chooser = dialog.getContentElement('info', 'external_link_chooser');
						var external_link_chooser_element = jQuery(external_link_chooser.getElement().getParent().getParent().$);
						var document_link_chooser = dialog.getContentElement('info', 'document_link_chooser');
						var document_link_chooser_element = jQuery(document_link_chooser.getElement().getParent().getParent().$);
						
						if(this.getValue() == 'internal') {
							internal_link_chooser_element.show();
							external_link_chooser_element.hide();
							document_link_chooser_element.hide();
						} else if(this.getValue() == 'external') {
							internal_link_chooser_element.hide();
							external_link_chooser_element.show();
							document_link_chooser_element.hide();
						} else if(this.getValue() == 'document') {
							internal_link_chooser_element.hide();
							external_link_chooser_element.hide();
							document_link_chooser_element.show();
						} else {
							internal_link_chooser_element.hide();
							external_link_chooser_element.hide();
							document_link_chooser_element.hide();
						}
						if(editor.config.linkShowTargetTab && (this.getValue() == 'internal' || this.getValue() == 'external' || this.getValue() == 'document')) {
							dialog.showPage('target');
						}
					};
				});
				infoTab.add({
					html: '<div></div>',
					id : 'internal_link_chooser',
					type : 'html'
				});
				infoTab.add({
					html: '<div></div>',
					id : 'external_link_chooser',
					type : 'html'
				});
				infoTab.add({
					html: '<div></div>',
					id : 'document_link_chooser',
					type : 'html'
				});
				dialogDefinition.onLoad = CKEDITOR.tools.override(dialogDefinition.onLoad, function(orig) {
					return function() {
						var dialog = this;
						
						_this.prepare_chooser(dialog, 'internal_link_chooser', 'proxy_url');
						_this.prepare_chooser(dialog, 'external_link_chooser', 'proxy_url');
						_this.prepare_chooser(dialog, 'document_link_chooser', 'url');
						
						return orig.apply(this, arguments);
					};
				});
			}
		});
	},
	
	prepare: function() {
		var module_content = this.getModuleContents();
		if(module_content !== null) {
			this._element.text(module_content);
		}
		var textarea = this._element.get(0);
		if(!textarea.hasAttribute('id')) {
			textarea.setAttribute('id', Widget.uuid());
		}
		this.settings.contentsCss = this.settings.contentsCss || this.getCssUrls();
		this.settings.stylesSet = this.settings.stylesSet || this.getStyles();
		var instance = this.instance = CKEDITOR.replace(textarea, this.settings);

		var picker_session = this._element.attr('data-widget-picker-session');
		if(picker_session) {
			var picker = null;
			Widget.createWithElement('image_picker', function(image_picker) {
				picker = image_picker;
				picker.set_callback(function() {
					var selected_images = jQuery.makeArray(arguments);
					var image = instance.getSelection().getSelectedElement();
					var image_width = '600';
					if(image !== null && image.$.tagName.toLowerCase() === 'img') {
						image_width = image.$.getAttribute('width');
						image.remove();
					}
					jQuery.each(selected_images, function(i, image_id) {
						image = CKEDITOR.dom.element.createFromHtml('<img/>');
						image.setAttribute('src', picker.document_url_from_id(image_id));
						image.setAttribute('width', image_width);
						instance.insertElement(image);
					});
					instance.fire('afterCommandExec', {name: 'PickImage', command: command});
				});
			}, picker_session);
			instance.addCommand('PickImage', {
				exec: function(editor) {
					picker.open_chooser();
				},
				async: true
			});
			instance.ui.addButton('PickImage', {
				label: 'Pick Image',
				command: 'PickImage'
			});
		}
		var rich_text = this;
	},
	
	prepare_chooser: function(dialog, name, url_function) {
		var chooser = dialog.getContentElement('info', name);
		var chooser_element = jQuery(chooser.getElement().$);
		Widget.createWithElement('page_input', function(widget) {
			widget.settings.default_value_label = '{{writeString=widget.richtext.links.use_url}}'
			widget.handle('element_set', function() {
				widget._element.appendTo(chooser_element);
				widget._element.change(function() {
					dialog.setValueOf('info', 'url', widget[url_function]());
					dialog.setValueOf('info', 'protocol', '');
				});
			});
		}, jQuery.noop);
	},
	
	get_data: function() {
		if(!this.instance) {
			return this._element.text();
		}
		return this.instance.getData();
	},
	
	set_data: function(new_data) {
		if(!this.instance) {
			this._element.text(new_data);
		} else {
			this.instance.setData(new_data);
		}
	},
	
	destroy: function() {
		this.instance.destroy();
		delete this.instance;
	},
	
	resize_to: function(width, height) {
		if(!this.editor_contents) {
			this.editor_contents = this._element.find('.cke_contents');
		}
		if(height) {
			this.editor_contents.css('height', ''+height+'px');
		}
		if(width) {
			this.editor_contents.css('width', ''+width+'px');
		}
	}
};
