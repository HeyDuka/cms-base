Widget.types.rich_text = {
	settings: {
		customConfig: '',
		toolbar_Full: [
			['Bold','Italic','-','Subscript','Superscript'],
			['Link','Unlink','Anchor'],
			['NumberedList','BulletedList','Blockquote'],
			['Undo','Redo','-','Find','-','RemoveFormat', 'Scayt', 'ShowBlocks'],
			['Maximize'],
			'/',
			['Styles','Format'],
			['Image', 'PickImage','HorizontalRule','Smiley','SpecialChar'],
			['Source'],
		],
		skin: "kama",
		entities: false,
		baseFloatZIndex: 1020,
		resize_enabled: false,
		height: 200
	},
	
	prepare: function() {
		var module_content = this.getModuleContents();
		if(module_content !== null) {
			this._element.text(module_content);
		}
		var textarea = this._element.get(0);
		if(!textarea.hasAttribute('id')) {
			textarea.setAttribute('id', Widget.uuid());
		}
		this.settings.contentsCss = this.settings.contentsCss || this.getCssUrls();
		this.settings.stylesSet = this.settings.stylesSet || this.getStyles();
		var instance = this.instance = CKEDITOR.replace(textarea, this.settings);

		var picker_session = this._element.attr('data-widget-picker-session');
		if(picker_session) {
			var picker = null;
			Widget.create('image_picker', function(image_picker) {
				picker = image_picker;
				picker.set_callback(function() {
					var selected_images = jQuery.makeArray(arguments);
					var image = instance.getSelection().getSelectedElement();
					var image_width = '600';
					if(image !== null && image.$.tagName.toLowerCase() === 'img') {
						image_width = image.$.getAttribute('width');
						image.remove();
					}
					jQuery.each(selected_images, function(i, image_id) {
						image = CKEDITOR.dom.element.createFromHtml('<img/>');
						image.setAttribute('src', picker.document_url_from_id(image_id));
						image.setAttribute('width', image_width);
						instance.insertElement(image);
					});
					instance.fire('afterCommandExec', {name: 'PickImage', command: command});
				});
			}, picker_session);
			instance.addCommand('PickImage', {
				exec: function(editor) {
					picker.open_chooser();
				},
				async: true
			});
			instance.ui.addButton('PickImage', {
				label: 'Pick Image',
				command: 'PickImage'
			});
		}
		var rich_text = this;
	},
	
	get_data: function() {
		if(!this.instance) {
			return this._element.text();
		}
		return this.instance.getData();
	},
	
	set_data: function(new_data) {
		if(!this.instance) {
			this._element.text(new_data);
		} else {
			this.instance.setData(new_data);
		}
	},
	
	destroy: function() {
		this.instance.destroy();
		delete this.instance;
	},
	
	resize_to: function(width, height) {
		if(!this.editor_contents) {
			this.editor_contents = this._element.find('.cke_contents');
		}
		if(height) {
			this.editor_contents.css('height', ''+height+'px');
		}
		if(width) {
			this.editor_contents.css('width', ''+width+'px');
		}
	}
};
