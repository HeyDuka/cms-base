Widget.types.tree = {
	prepare: function() {
		var widget = this;
		this.settings.tag_name = this.settings.tag_name || (this._element.is('ul') ? 'ul' : 'ol');

		this._element.delegate('.ui-tree li', 'click', function(event) {
			if(jQuery(event.target).is('.tree-opener')) {
				return;
			}
			jQuery('#admin_sidebar').find('li').each(function() {
				jQuery(this).removeClass('ui-state-hover').removeClass('ui-state-active');
			});
			var row = jQuery(this);
			row.addClass('ui-state-active');
			widget.fire('tree.clicked', row, widget.settings.data_from_element(row));
		});	
		this._element.delegate('.ui-tree li', 'hover', function(event) {
			var row = jQuery(this);
			row.toggleClass('ui-state-hover');
		});
		
		this.reload();
	},
	
	all_pages: function() {
		return jQuery('#admin_sidebar').find('li');
	},
	
	reload: function() {
		this._element.empty();
		this.open_item(this._element);
	},
	
	open_item: function(item, data) {
		var tree = this;
		this.listChildren(data, function(children) {
			jQuery.each(children, function(i, child) {
				tree.add_item(item, child)
			});
		});
	},
	
	add_item: function(parent, child) {
		if(parent === null) {
			parent = this._element;
		}
		if(parent.is('li')) {
			if(parent.find(this.settings.tag_name).length > 0) {
				parent = parent.find(this.settings.tag_name);
			} else {
				var new_parent = jQuery(document.createElement(this.settings.tag_name));
				new_parent.addClass(this._element.get(0).className).addClass("tree_level_"+child.TreeLevel);
				parent = new_parent.appendTo(parent);
			}
		}
		var element = jQuery("<li/>").text(this.settings.description_from_item(child));
		var opener = jQuery("<div/>").addClass('tree-opener ui-icon no-children');
		if(this.settings.has_children(child)) {
			opener.removeClass('no-children');
			opener.addClass('ui-icon-circlesmall-plus closed');
			opener.click(function() {
				if(opener.hasClass('opened')) {
					opener.removeClass('opened ui-icon-circlesmall-minus').addClass('closed ui-icon-circlesmall-plus');
					element.find(this.settings.tag_name).hide();
				} else {
					opener.removeClass('closed ui-icon-circlesmall-plus').addClass('opened ui-icon-circlesmall-minus');
					var sub_list = element.find(this.settings.tag_name).show();
					if(sub_list.length === 0) {
						this.open_item(element, this.settings.data_from_element(element));
					}
				}
			}.bind(this));
		}
		element.prepend(opener);
		element.data('tree-data', child);
		parent.append(element);
		return parent;
	},
	
	settings: {
		description_from_item: jQuery.noop,
		has_children: jQuery.noop,
		data_from_element: jQuery.noop
	}
};
