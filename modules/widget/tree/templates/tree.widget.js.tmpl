Widget.types.tree = {
	prepare: function() {
		var _this = this;
		this.settings.tag_name = this.settings.tag_name || (this._element.is('ul') ? 'ul' : 'ol');
		
		// Item click handler
		this._element.bind('select_node.jstree', function(event) {
			// Get the selected item
			var element = _this._tree.get_selected();
			// Open it
			if(!_this._tree.is_open(element)) {
				_this._tree.open_node(element);
			}
			// Select it
			_this.activate(element);
		});
		
		//Open initially opened items
		this._element.one('loaded.jstree', function(event, result) {
			var open_initial_nodes = function(event, data) {
				var callback = arguments.callee;
				var opened_node = data.rslt.obj;
				_this._tree._get_children(opened_node).each(function() {
					var node = jQuery(this);
					var data = node.data('jstree');
					if(_this.settings.is_active(data)) {
						_this._tree.select_node(node);
					} else if(_this.settings.is_open(data)) {
						_this._element.one('open_node.jstree', callback);
						_this._tree.open_node(node);
					}
				});
			};
			open_initial_nodes(null, {rslt: {obj: _this._element}});
		});
		
		this._element.jstree({
			plugins: ["ui", "themeroller", "tree_widget", "crrm", "dnd", 'ui'],
			tree_widget: {widget: _this},
			crrm: {
				move: {
					default_position: 'first',
					check_move: function(data) {
						return _this.settings.may_create_children(data.np.data('jstree'));
					}
				}
			},
			
			dnd: {
				//TODO: fill in function callbacks for sort, move and deny
				drag_target: false,
				drop_target: false
			},
			
			ui: {
				select_limit: 1,
				selected_parent_close: false,
				select_multiple_modifier: false
			}
		});
		this._tree = jQuery.jstree._reference(this._element);
		this._element.bind('move_node.jstree', function(event, data) {
			_this.moveItem(_this.identifier_from_element(data.rslt.o), _this.identifier_from_element(data.rslt.r), data.rslt.p);
		}).bind('refresh.jstree', function(event, data) {
			if(_this.current_element_identifier && _this.current_element().length == 0) {
				var new_element = _this.element_with_identifier(_this.current_element_identifier);
				_this.activate(new_element);
			}
		});
		// this.reload();
	},
	
	reload: function() {
		this._tree.refresh();
	},
	
	load_item: function(item, success) {
		var _this = this;
		var id = item == -1 ? null : this.identifier_from_element(item);
		this.listChildren(id, function(children) {
			var result = [];
			jQuery.each(children, function(i, child) {
				var icons = _this.settings.icons_from_item(child);
				jQuery.each(icons, function(i, theIcon) {
					icons[i] = 'ui-icon ui-icon-'+theIcon
				});
				var node = {
					data: {title: _this.settings.description_from_item(child), icon: icons},
					metadata: child,
				};
				if(_this.settings.has_children(child)) {
					node.state = _this.settings.is_open(child) ? 'closed' : 'closed';

				}
				result.push(node);
			});
			success(result);
		});
	},
	
	open_item: function(item, data) {
		var tree = this;
		this.listChildren(data, function(children) {
			jQuery.each(children, function(i, child) {
				tree.add_item(item, child);
			});
		});
	},
	
	add_item: function(parent, child) {
		if(parent === null) {
			parent = this._element;
		}
		if(parent.is('li')) {
			if(parent.children(this.settings.tag_name).length > 0) {
				// /there/is/only.one
				parent = parent.children(this.settings.tag_name);
			} else {
				var new_parent = jQuery(document.createElement(this.settings.tag_name));
				new_parent.addClass(this._element[0].className).addClass("tree_level_"+child.TreeLevel);
				parent = new_parent.appendTo(parent);
			}
		}
		// var element = jQuery("<li/>").text(this.settings.description_from_item(child));
		var description = jQuery("<span/>").text(this.settings.description_from_item(child));
		var element = jQuery("<li/>").append(description);
		var opener = jQuery("<div/>").addClass('tree-opener ui-icon no-children');
		var icons = jQuery('<div/>').addClass('ui-icons');
		
		if(this.settings.has_children(child)) {
			opener.removeClass('no-children');
			opener.addClass('ui-icon-triangle-1-e closed');
		}
		element.prepend(icons);
		element.prepend(opener);
		element.data('tree-data', child);
		parent.append(element);
		if(this.settings.is_open(child)) {
			this.open(element, opener);
		}
		if(this.settings.is_active(child)) {
			this.activate(element);
		}
		this.fire('tree_item.inserted', element, child);
		return parent;
	},
	
	activate: function(element) {
		// this._element.find('li').removeClass('ui-state-active');
		// element.addClass('ui-state-active');
		var new_identifier = this.identifier_from_element(element);
		var has_changed = this.current_element_identifier !== new_identifier;
		this.current_element_identifier = new_identifier;
		this.fire('tree_item-activated', element, this.current_element_identifier, has_changed);
	},
	
	parent_of: function(element) {
		return this._tree._get_parent(element);
	},
	
	remove_element_with_identifier: function(data) {
		var element = this.element_with_identifier(data);
		var parent = this.parent_of(element);
		// var is_selected = element.is('.ui-state-active');
		this._tree.remove(element);
		// if(is_selected) {
		// 	this.activate(parent);
		// }
	},
	
	current_element: function() {
		return this._element.find('li.ui-state-active');
	},
	
	all_pages: function() {
		return jQuery('#admin_sidebar').find('li');
	},
	
	element_with_identifier: function(data) {
		var result = null;
		var widget = this;
		this._element.find('li').each(function() {
			if(widget.identifier_from_element(jQuery(this)) === data) {
				result = jQuery(this);
				return false;
			}
		});
		return result;
	},
	
	update_element: function(element) {
		var data = arguments[1] || this.identifier_from_element(element);
		this.loadItem(data, function(item) {
			var icons = element.children('.ui-icons').empty();
			var name = element.children('span').text(this.settings.description_from_item(item));
			var opener = element.children('.tree-opener').removeClass('no-children');
			if(!this.settings.has_children(item)) {
				element.removeClass('opened');
				opener.addClass('no-children').removeClass('opened closed');
			}
			this.fire('updated', element, item);
		});
	},
	
	identifier_from_element: function(element) {
		return this.settings.identifier_from_data(element.data('jstree'));
	},
	
	/**
	* Reloads the children of a given element (li) as well as its properties. The item retains its open/closed state
	* @param element the element to reload
	*/
	reload_element: function(element) {
		this._tree.refresh(element);
		// this.update_element(element);
		// opener = element.children('.tree-opener');
		// var sub_list = element.find(this.settings.tag_name);
		// if(sub_list.length === 0 && !opener.is('.no-children')) {
		// 	return;
		// }
		// sub_list.remove();
		// if(opener.is('.opened') || opener.is('.no-children')) {
		// 	opener.removeClass('opened no-children').addClass('closed');
		// 	//Reload immediately
		// 	this.open(element, opener);
		// }
	},
	
	open: function(element, opener) {
		opener = opener || element.children('.tree-opener');
		if(opener.is('.opened')) {
			return false;
		}
		element.addClass('opened');
		opener.removeClass('closed ui-icon-triangle-1-e').addClass('opened ui-icon-triangle-1-s');
		var sub_list = element.find(this.settings.tag_name).show();
		if(sub_list.length === 0) {
			this.open_item(element, this.identifier_from_element(element));
		}
	},
	
	close: function(element, opener) {
		opener = opener || element.children('.tree-opener');
		if(opener.is('.closed')) {
			return;
		}
		element.removeClass('opened');
		opener.removeClass('opened ui-icon-triangle-1-s').addClass('closed ui-icon-triangle-1-e');
		element.find(this.settings.tag_name).hide();
	},
	
	update_elements: function() {
		var tree = this;
		tree._element.find('li').each(function() {
			tree.update_element(jQuery(this));
		});
	},
	
	current_element_identifier: null,
	
	settings: {
		description_from_item: jQuery.noop,
		has_children: jQuery.noop,
		may_create_children: jQuery.noop,
		identifier_from_data: jQuery.noop,
		is_open: jQuery.noop,
		is_active: jQuery.noop,
		custom_class: jQuery.noop,
		allow_reorder: jQuery.noop,
		icons_from_item: jQuery.noop
	}
};
