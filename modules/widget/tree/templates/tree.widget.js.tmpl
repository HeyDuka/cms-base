Widget.types.tree = {
	prepare: function() {
		var widget = this;
		this.settings.tag_name = this.settings.tag_name || (this._element.is('ul') ? 'ul' : 'ol');

		this._element.delegate('.ui-tree li', 'click', function(event) {
			if(jQuery(event.target).is('.tree-opener')) {
				return;
			}
			var element = jQuery(this);
			widget.activate(element);
			widget.fire('tree.clicked', element, widget.settings.data_from_element(element));
		});	
		this._element.delegate('.ui-tree li', 'hover', function(event) {
			var element = jQuery(this);
			element.toggleClass('ui-state-hover');
		});
		
		this.reload();
	},
	
	activate: function(element) {
		this._element.find('li').removeClass('ui-state-active');
		element.addClass('ui-state-active');
	},
	
	all_pages: function() {
		return jQuery('#admin_sidebar').find('li');
	},
	
	element_with_data: function(data) {
		var result = null;
		var widget = this;
		this._element.find('li').each(function() {
			if(widget.settings.data_from_element(jQuery(this)) === data) {
				result = jQuery(this);
				return false;
			}
		});
		return result;
	},
	
	update_element: function(element) {
		var data = arguments[1] || this.settings.data_from_element(element);
		this.loadItem(data, function(item) {
			var icons = element.children('.ui-icons');
			var name = element.children('span');
			icons.empty();
			name.text(this.settings.description_from_item(item));
			this.fire('tree.updated', element, item);
		});
	},
	
	reload: function() {
		this._element.empty();
		this.open_item(this._element);
	},
	
	open: function(element, opener) {
		opener = opener || element.children('.tree-opener');
		if(opener.hasClass('opened')) {
			return;
		}
		opener.removeClass('closed ui-icon-triangle-1-e').addClass('opened ui-icon-triangle-1-s');
		var sub_list = element.find(this.settings.tag_name).show();
		if(sub_list.length === 0) {
			this.open_item(element, this.settings.data_from_element(element));
		}
	},
	
	close: function(element, opener) {
		opener = opener || element.children('.tree-opener');
		if(opener.hasClass('closed')) {
			return;
		}
		opener.removeClass('opened ui-icon-triangle-1-s').addClass('closed ui-icon-triangle-1-e');
		element.find(this.settings.tag_name).hide();
	},
	
	open_item: function(item, data) {
		var tree = this;
		this.listChildren(data, function(children) {
			jQuery.each(children, function(i, child) {
				tree.add_item(item, child);
			});
		});
	},
	
	add_item: function(parent, child) {
		if(parent === null) {
			parent = this._element;
		}
		if(parent.is('li')) {
			if(parent.find(this.settings.tag_name).length > 0) {
				parent = parent.find(this.settings.tag_name);
			} else {
				var new_parent = jQuery(document.createElement(this.settings.tag_name));
				new_parent.addClass(this._element.get(0).className).addClass("tree_level_"+child.TreeLevel);
				parent = new_parent.appendTo(parent);
			}
		}
		// var element = jQuery("<li/>").text(this.settings.description_from_item(child));
		var element = jQuery("<li/>").append(jQuery("<span/>").text(this.settings.description_from_item(child)));
		var opener = jQuery("<div/>").addClass('tree-opener ui-icon no-children');
		var icons = jQuery('<div/>').addClass('ui-icons');
		
		if(this.settings.has_children(child)) {
			opener.removeClass('no-children');
			opener.addClass('ui-icon-triangle-1-e closed');
			element.click(function(event) {
				if(jQuery(event.target).closest(this.settings.tag_name)[0] !== element.closest(this.settings.tag_name)[0]) {
					return;
				}
				if(opener.hasClass('opened') && jQuery(event.target)[0] === opener[0]) {
					this.close(element, opener);
				} else {
					this.open(element, opener);
				}
			}.bind(this));
		}
		element.prepend(icons);
		element.prepend(opener);
		element.data('tree-data', child);
		parent.append(element);
		if(this.settings.is_open(child)) {
			this.open(element, opener);
		}
		if(this.settings.is_active(child)) {
			this.activate(element);
		}
		this.fire('tree.inserted', element, child);
		return parent;
	},
	
	update_elements: function() {
		var tree = this;
		tree._element.find('li').each(function() {
			tree.update_element(jQuery(this));
		});
	},
	
	add_icon: function(name, element) {
		var icons = element.children('.ui-icons');
		icons.append(jQuery('<div/>').addClass('ui-icon ui-icon-'+name));
	},
	
	settings: {
		description_from_item: jQuery.noop,
		has_children: jQuery.noop,
		data_from_element: jQuery.noop,
		is_open: jQuery.noop,
		is_active: jQuery.noop
	}
};
