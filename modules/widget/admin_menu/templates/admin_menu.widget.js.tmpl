Widget.types.admin_menu = {
	prepare: function() {
		this.button_prototype = jQuery.parseHTML('{{includeTemplate=menu_button.incl}}');
		this.toolbar = this._element.children();
		this.right_container = this.toolbar.find('.admin_menu_right');
		this.left_container = this.toolbar.find('.admin_menu_left');
		this.activity_indicator = jQuery();
		var admin_menu = this;
		
		jQuery.each(this.getModuleConfig(), function(i, config) {
			var is_right = (i === 'right');
			jQuery.each(config, function(i, config_item) {
				var name = null;
				var args = [];
				if(jQuery.isArray(config_item)) {
					name = 'menu';
					args[0] = config_item;
				} else if(!config_item) {
					admin_menu.addSpacer(15, is_right);
					return;
				} else {
					name = config_item.split('.');
					args = name.slice(1);
					name = name[0];
				}
				var to_add = admin_menu.predefined_elements[name].apply(admin_menu, args);
				if(!to_add) {
					return;
				}
				if(to_add.callback) {
					if(to_add.text) {
						admin_menu.addButton(to_add.text, to_add.callback, is_right, to_add.element, to_add);
					} else {
						if(admin_menu.settings.attach_events) {
							to_add.element.click(to_add.callback);
						}
						admin_menu.addElement(to_add.element, is_right);
					}
				} else {
					if(to_add.text) {
						admin_menu.addButton(to_add.text, jQuery.noop, is_right, to_add.element, to_add);
					} else {
						admin_menu.addElement(to_add.element, is_right);
					}
				}
			});
		});
		Widget.handle('cmos-logged_in', this.show.bind(this), true, true);
	},
	
	activity: function() {
		this.activity_indicator.data('usage', this.activity_indicator.data('usage')+1);
		this.activity_indicator.css({display: ''});
	},
	
	end_activity: function() {
		this.activity_indicator.data('usage', this.activity_indicator.data('usage')-1);
		if(this.activity_indicator.data('usage') <= 0) {
			this.activity_indicator.hide();
		}
	},
	
	show: function() {
		this._element.show();
		// if(window.PreviewInterface) {
		// 	jQuery('html').css({marginTop: '30px'});
		// }
	},
	
	hide: function() {
		this._element.hide();
	},
	
	addElement: function(element, is_right_container) {
		var appendee = this.left_container;
		if(is_right_container) {
			appendee = this.right_container;
		}
		jQuery(element).appendTo(appendee);
		return this;
	},
	
	addButton: function(text, callback, is_right_container, element, attributes) {
		if(!element) {
			element = this.button_prototype.clone();
		}
		attributes = attributes || {};
		if(attributes.is_active) {
			element.addClass('ui-state-active');
		}
		if(!text) {
			text = '';
		}
		element.find('.ui-button-text').text(text);
		if(this.settings.attach_events) {
			element.click(callback);
		}
		return this.addElement(element, is_right_container);
	},
		
	addSpacer: function(width, is_right_container) {
		return this.addElement(jQuery.parseHTML('<span style="display:inline-block;width:'+width+'px;"/>'), is_right_container);
	},
	
	settings: {
		attach_events: true
	},
	
	predefined_elements: {
		activity: function() {
			this.activity_indicator = jQuery('<img/>').attr({src: "{{writeConstantValue=INT_IMAGES_DIR_FE}}/admin/activity_indicator.gif"}).addClass('activity_indicator').data('usage', 0).hide();
			return {element: this.activity_indicator};
		},
		
		menu: function(items) {
			var admin_menu = this;
			var result = {};
			result.element = jQuery('<select/>');
			var current_module = AdminInterface.current_admin_module;
			var default_title = '{{writeString=wns.module_select.default_option.title}}';
			// todo: remove checked or style when no option is selected
			result.element.append(jQuery('<option/>').text(default_title).addClass('default_option'));
			var separator_class = '';
			jQuery.each(items, function(i, item) {
				if(!item) {
					//handle Separator
					separator_class = 'separator_top';
					return;
				}
				var name = item.split('.');
				var args = name.slice(1);
				name = name[0];
				var item_contents = admin_menu.predefined_elements[name].apply(admin_menu, args);
				if(!item_contents) {
					return;
				}
				var option = jQuery('<option/>').text(item_contents.text).attr('value', args[0]).addClass(separator_class).data('action', item_contents.callback);
				separator_class = '';
				result.element.append(option);
			});
			result.element.val(AdminInterface.current_admin_module);
			if(AdminInterface.current_admin_module == 'dashboard' || AdminInterface.current_admin_module == 'pages') result.element.addClass('inactive');
			// add current module if not part of
			if(this.settings.attach_events) {
				result.element.bind('change', function() {
					var selected = jQuery(this).find(':selected');
					if(!jQuery.isFunction(selected.data('action'))) {
						result.element.addClass('inactive');
						return false;
					}
					result.element.removeClass('inactive');
					selected.data('action')();
				});
			}
			result.callback = jQuery.noop;
			// var current_module = AdminInterface.current_admin_module;
			// var current_option = result.element.find('option[value=current_module]');
			// if(current_option.length == 0) {
			// 	result.element.append(jQuery('<option/>').val(current_module).text(current_module).attr('selected', 'selected'));
			// }
			return result;
		},
		
		module: function(module) {
			var result = {};
			var module_info = this.getModule(module);
			if(!module_info.may) {
				return null;
			}
			result.callback = function() {
				var link = module != 'dashboard' ? module_info.link : module_info.link+"/"+AdminInterface.current_admin_module;
				window.location.href = link;
			};
			result.text = module_info.title;
			result.element = this.button_prototype.clone().addClass('module_link '+module).attr('title', module_info.title);
			return result;
		},
		
		languages: function() {
			var select = jQuery('<select/>').addClass('content_language').attr('data-widget-type', 'language_input');
			var admin_menu = this;
			select.prepareWidget(function(widget) {
				widget.settings.international_option = false;
			}, function(widget) {
				if(admin_menu.settings.attach_events) {
					select.change(function() {
						widget.setContentLanguage(select.val());
						AdminInterface.content_language = select.val();
						Widget.fire('cmos-language_changed', select.val());
					});
				}
				widget.handle('prepared', function() {
					select.val(selected);
				});
			});
			return {element: select, callback: jQuery.noop};
		},
		
		domain_name: function() {
			return {element: jQuery("<span/>").text('{{writeSettingValue=name;section=domain_holder}}').attr('class', "domain_name")};
		},
		
		tag: function() {
			var element = jQuery('<button/>').addClass('open-tag-panel').text('{{writeString=wns.tag}}');
			element.button();
			return {element: element, callback: function(event) {
				Widget.create('tag_panel', function(tag_panel) {
					tag_panel.toggle_at({left: event.clientX, top: event.clientY+10});
				});
			}};
		},
		
		logo: function() {
			return {element: jQuery("<span/>").text('@ rapila').attr('class', "cmos_logo")};
		},
		
		preview: function() {
			var result = {text: "{{writeString=wns.page.preview_linktext}}"};
			var admin_menu = this;
			result.callback = function() {
				window.location = admin_menu.getPreviewLink();
			};
			return result;
		},
		
		edit: function() {
			var result = {text: "{{writeString=wns.page.edit_linktext}}"};
			if(AdminInterface.current_admin_module == 'pages') {
				result.is_active = true;
			} else {
				result.callback = function() {
					window.location = '{{writeLink=pages;manager=AdminManager}}';
				};
			}
			return result;
		},
		
		logout: function() {
			var admin_menu = this;
			var result = {};
			result.callback = function() {
				var page_link = admin_menu.getPageLink();
				Widget.create('login_window', function(login_window) {
					login_window.logout(function() {
						window.location.href = page_link;
					});
					this.hide();
				}.bind(this));
			}.bind(this);
			result.text = '{{writeString=wns.logout}}';
			result.element = this.button_prototype.clone().addClass('logout_link').attr('title', result.text);
			return result;
		},
		
		user: function() {
			var admin_menu = this;
			var user_info = this.getUserInfo();
			return {text: user_info.FullName, callback: function() {
				var _this = this;
				Widget.create('user_detail', function(widget) {
					widget.setUserId(user_info.Id);
					widget.fill_data();
					widget.open();
					widget.save_callback = function() {
						jQuery(_this).find('.ui-button-text').text(admin_menu.getUserInfo()['FullName']);
					};
				});
			}};
		}
	}
};