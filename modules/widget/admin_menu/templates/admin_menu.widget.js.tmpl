Widget.handle('cmos.logged_in', function() {
	Widget.create('admin_menu').show();
});

Widget.types.admin_menu = {
	prepare: function() {
		this.button_prototype = jQuery('{{includeTemplate=menu_button.incl}}');
		this.toolbar = this._element.children();
		this.right_container = this.toolbar.find('.admin_menu_right');
		this.left_container = this.toolbar.find('.admin_menu_left');
		this.activity_indicator = jQuery();
		var admin_menu = this;
		jQuery.each(this.getModuleConfig(), function(i, config) {
			var is_right = (i === 'right');
			jQuery.each(config, function(i, config_item) {
				var name = null;
				var args = [];
				if(jQuery.isArray(config_item)) {
					name = 'menu';
					args[0] = config_item;
				} else if(!config_item) {
					admin_menu.addSpacer(15, is_right);
					return;
				} else {
					name = config_item.split('.');
					args = name.slice(1);
					name = name[0];
				}
				var to_add = admin_menu.predefined_elements[name].apply(admin_menu, args);
				if(!to_add) {
					return;
				}
				if(to_add.callback) {
					if(to_add.text) {
						admin_menu.addButton(to_add.text, to_add.callback, is_right, to_add.element);
					} else {
						admin_menu.addElement(to_add.element.click(to_add.callback), is_right);
					}
				} else {
					admin_menu.addElement(to_add.element, is_right);
				}
			});
		});
	},
	
	activity: function() {
		this.activity_indicator.data('usage', this.activity_indicator.data('usage')+1);
		this.activity_indicator.css({display: ''});
	},
	
	end_activity: function() {
		this.activity_indicator.data('usage', this.activity_indicator.data('usage')-1);
		if(this.activity_indicator.data('usage') <= 0) {
			this.activity_indicator.hide();
		}
	},
	
	show: function() {
		if(window.AdminInterface) {
			return this._element.show();
		}
		this._element.show();
		// this._element.show('slide', {direction: 'up'});
	},
	
	hide: function() {
		if(window.AdminInterface) {
			return this._element.hide();
		}
		this._element.hide();
	},
	
	addElement: function(element, is_right_container) {
		var appendee = this.left_container;
		if(is_right_container) {
			appendee = this.right_container;
		}
		jQuery(element).appendTo(appendee);
		return this;
	},
	
	addButton: function(text, callback, is_right_container, element) {
		if(!element) {
			element = this.button_prototype.clone();
		}
		if(text == null) {
			text = '';
		}
		element.find('.ui-button-text').text(text);
		return this.addElement(element.click(callback), is_right_container);
	},
		
	addSpacer: function(width, is_right_container) {
		return this.addElement(jQuery('<span style="display:inline-block;width:'+width+'px;"/>'), is_right_container);
	},
	
	addLanguageSelector: function(selected) {
		var select = jQuery('<select/>').addClass('content_language').attr('data-widget-type', 'language_input');
		select.prepareWidget(function(widget) {
			widget.settings.international_option = false;
			select.change(function() {
				widget.setContentLanguage(select.val());
				AdminInterface.content_language = select.val();
				Widget.fire('cmos.language_changed', select.val());
			});
			widget.handle('prepared', function() {
				select.val(selected);
			});
		});
		return this.addElement(select, true);
	},
	
	predefined_elements: {
		activity: function() {
			this.activity_indicator = jQuery('<img>').attr({src: "{{writeConstantValue=INT_IMAGES_DIR_FE}}/admin/activity_indicator.gif"}).addClass('activity_indicator').data('usage', 0).hide();
			return {element: this.activity_indicator};
		},
		
		menu: function(items) {
			var admin_menu = this;
			var result = {};
			result.element = jQuery('<select/>');
			jQuery.each(items, function(i, item) {
				if(!item) {
					//handle Separator
					result.element.append(jQuery('<option/>').addClass('separator'));
					return;
				}
				var name = item.split('.');
				var args = name.slice(1);
				name = name[0];
				var item_contents = admin_menu.predefined_elements[name].apply(admin_menu, args);
				if(!item_contents) {
					return;
				}
				var option = jQuery('<option/>').text(item_contents.text).data('action', item_contents.callback);
				result.element.append(option);
			});
			result.element.bind('change', function() {
				var selected = jQuery(this).find(':selected');
				if(selected.is('.separator')) {
					return false;
				}
				selected.data('action')();
			});
			result.callback = jQuery.noop;
			return result;
		},
		
		module: function(module) {
			var result = {};
			var module_info = this.getModule(module);
			result.callback = function() {
				window.location.href = module_info.link;
			};
			result.text = module_info.title;
			result.element = this.button_prototype.clone().addClass('module_link '+module).attr('title', module_info.title);
			return result;
		},
		
		domain_name: function() {
			return {element: jQuery("<span/>").text('{{writeSettingValue=name;section=domain_holder}}').attr('class', "domain_name")};
		},
		
		logo: function() {
			return {element: jQuery("<span/>").text('cmos').attr('class', "cmos_logo")};
		},
		
		preview: function() {
			return {callback: function() {
				//Handle Preview link
			}.bind(this), text: "{{writeString=widget.page.preview_linktext}}"};
		},
		
		edit: function() {
			return {callback: function() {
				//Handle Edit link
			}.bind(this), text: "{{writeString=widget.page.edit_linktext}}"};
		},
		
		logout: function() {
			var result = {};
			result.callback = function() {
				Widget.create('login_window', function(login_window) {
					login_window.logout(function() {
						this.show();
					});
					this.hide();
				}.bind(this));
			}.bind(this);
			result.text = '{{writeString=logout_linkname}}';
			result.element = this.button_prototype.clone().addClass('logout_link').attr('title', result.text);
			return result;
		},
		
		user: function() {
			return {text: this.getLoggedInName(), callback: function() {
				window.location.href = '{{writeLink=users;manager=AdminManager;user_id=1}}';
			}};
		},
	}
};