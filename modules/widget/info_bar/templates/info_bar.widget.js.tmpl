Widget.types.info_bar = {
	initialize: function() {
		this.sidebar = AdminInterface.sidebar;
		this.content_area = AdminInterface.content;
		this.is_pages_module = AdminInterface.current_admin_module === "pages";
		this.button_prototype = jQuery('<a/>').addClass('info-bar-button').text('Â ');
	},
	
	prepare: function() {
		this.resizer = this._element.find('.sidebar_resizer');
		this.infobar_left = this._element.find('.infobar_left');
		this.infobar_right = this._element.find('.infobar_right');
		this.admin_menu_right = this._element.find('.admin_menu_right');
		this.admin_menu_left = this._element.find('.admin_menu_left');
		
		if(this.sidebar.length === 0) {
			this.resizer.remove();
			this.infobar_left.remove();
			this.infobar_right.css('left', 0);
			return;
		}
		this.resizer.draggable({
			axis: 'x',
			containment: 'parent',
			drag: this.resizer_moved.bind(this)
		});
	},
	
	resizer_moved: function(event, ui) {
		if(ui.position.left>this.settings.max_width) {
			ui.position.left = this.settings.max_width;
		} else if(ui.position.left < this.settings.min_width) {
			ui.position.left = this.settings.min_width;
		}
		var px = ''+ui.position.left+'px';
		this.sidebar.css('width', px);
		this.content_area.css('left', px);
		this.infobar_right.css('left', px);
		this.admin_menu_right.css('left', px);
		this.admin_menu_left.css('width', px);
	},
	
	add_element: function(element, is_right_container, is_before, accesskey) {
		var appendee = is_right_container ? this.infobar_right : this.infobar_left;
		var func = is_before ? element.prependTo : element.appendTo;
		if(accesskey) {
			element.attr('accesskey', accesskey);
		}
		if(this.is_pages_module && is_right_container) {
			element.addClass('info-bar-element-page');
		} else {
			element.addClass('info-bar-element');
		}
		func.call(element, appendee);
		return this;
	},
	
	add_button: function(identifier, action, accesskey, is_right_container, is_before, title_text) {
		title_text = title_text === undefined ? "{{writeString=wns.create_new_entry}}" : title_text;
		var element = this.button_prototype.clone().addClass(identifier).click(action);
		element.attr('title', title_text);
		this.add_element(element, is_right_container, is_before, accesskey);
		return this;
	},
	
	add_menu: function(identifier) {
		return this;
	},
	
	add_menu_item: function(menuIdentifier, identifier, label, action, accesskey) {
		return this;
	},
	
	set_active_status: function(identifier, active) {
		return this;
	},
	
	add_search_input: function(default_value, click_handler) {
		if(!default_value) {
			default_value = "{{writeString=wns.search.enter_search}}";
		}
		var search_input = jQuery('<input/>').addClass('default_state search_field').attr({name: 'search', value: default_value, type: 'text', autocomplete: 'off'});
		this.add_element(search_input, true, false, 'f');
		var clear_button = this.button_prototype.clone().addClass('search_field_reset').hide();
		this.add_element(clear_button, true).add_button('search_button', function() {
			if(search_input.is('.default_state')) {
				Widget.notifyUser(Widget.logSeverity.INFO, "{{writeString=wns.not_applicable.add_search_word}}");
				return;
			}
			click_handler(search_input.val());
		}, '', true);
		var search_button = clear_button.next('.search_button');
		clear_button.click(function() {
			search_input.val('').focus();
			search_button.removeClass('active');
			click_handler(null);
			jQuery(this).hide();
		});
		return search_input.focus(function() {
			if(search_input.is('.default_state')) {
				search_input.removeClass('default_state').val('');
			}
		}).blur(function() {
			if(search_input.val() === '') { 
				search_input.addClass('default_state').val(default_value);
			}
		}).bind('keyup', function(event) {
			if(event.which === 27) { 
				return clear_button.click();
			}
			if(event.which === 13) {
				return search_button.click();
			}
			if(search_input.val() === '') {
				clear_button.hide();
				search_button.removeClass('active');
			} else {
				clear_button.show();
				search_button.addClass('active');
			}
		});
	},
	
	add_row_count_info_for_list: function(list) {
		var row_count_info = jQuery('<span/>').addClass('row_count_info');
		this.add_element(row_count_info, true);
		list.handle('reloaded', function() {
			row_count_info.text("{{writeParameterizedString=wns.list_count;total=$\{total\};current=$\{current\}}}".replace(/\$\{total\}/, this.getNumberOfRows()).replace('${current}', this.current_row_count()));
		}, false, true);
	},
	
	settings: {
		max_width: 480,
		min_width: 100
	}
};