<?php

/**
* @package helpers
*/
class BuildHelper {
  public static function preBuild() {
    Cache::clearAllCaches();
    self::compileSchemaXml();
  }
  
  public static function postBuild() {
    self::moveModel();
    self::deleteUnusedFiles();
    Cache::clearAllCaches();
  }
  
  private static function compileSchemaXml() {
    $sSchemaOutputPath = ResourceFinder::findResource(DIRNAME_CONFIG, ResourceFinder::SEARCH_INT_ONLY).'/schema.xml';
    $oSchemaTemplate = new Template('schema_prototype.xml', array(DIRNAME_CONFIG, 'flag' => "SEARCH_INT_ONLY"));
    $oSchemaTemplate->replaceIdentifier('comment', "This file is generated by the mini_cms_generate_model.sh script, edit schema_prototype.xml.tmpl or the module's schema.xml file instead", null, Template::NO_HTML_ESCAPE);
    $aSchemaFiles = ResourceFinder::findResourceByExpressions(array(DIRNAME_MODULES, Module::ANY_NAME_OR_TYPE_PATTERN, Module::ANY_NAME_OR_TYPE_PATTERN, DIRNAME_CONFIG, "schema.xml"));
    foreach($aSchemaFiles as $sSchemaPath) {
      $oSchemaTemplate->replaceIdentifierMultiple('extensions', file_get_contents($sSchemaPath), null, Template::NO_HTML_ESCAPE);
    }
    $aSchemaFilesNS = ResourceFinder::findResourceByExpressions(array(DIRNAME_MODULES, Module::ANY_NAME_OR_TYPE_PATTERN, Module::ANY_NAME_OR_TYPE_PATTERN, DIRNAME_CONFIG, "/.*\.schema\.xml/"));
    foreach($aSchemaFilesNS as $sSchemaName => $sSchemaPath) {
      copy($sSchemaPath, MAIN_DIR.'/'.DIRNAME_CONFIG.strrchr($sSchemaName, '/'));
    }
    file_put_contents($sSchemaOutputPath, $oSchemaTemplate->render());
  }
    
  /**
  * Moves the model files of modules to that modules directories. Called by the mini_cms_generate_model.sh script
  */
  private static function moveModel() {
    $sClassNamePattern = "/phpName=\"(\w+)\"/";
    $aSchemaFiles = ResourceFinder::findResourceByExpressions(array(DIRNAME_MODULES, Module::ANY_NAME_OR_TYPE_PATTERN, Module::ANY_NAME_OR_TYPE_PATTERN, DIRNAME_CONFIG, "schema.xml"));
    foreach($aSchemaFiles as $sSchemaPath) {
      $sNewModelDir = dirname(dirname($sSchemaPath))."/".DIRNAME_MODEL;
      if(!is_dir($sNewModelDir)) {
        mkdir($sNewModelDir);
      }
      
      $sNewModelBaseDir = "$sNewModelDir/om";
      if(!is_dir($sNewModelBaseDir)) {
        mkdir($sNewModelBaseDir);
      }
      
      $sNewModelMapDir = "$sNewModelDir/map";
      if(!is_dir($sNewModelMapDir)) {
        mkdir($sNewModelMapDir);
      }
      
      $sSchema = file_get_contents($sSchemaPath);
      preg_match_all($sClassNamePattern, $sSchema, $aMatches);
      $aMatches = $aMatches[1];
      foreach($aMatches as $sClassName) {
        $sClassPath = ResourceFinder::findResource(array('includes', 'model', "$sClassName.php"), ResourceFinder::SEARCH_INT_ONLY);
        $sPeerClassPath = ResourceFinder::findResource(array('includes', 'model', "${sClassName}Peer.php"), ResourceFinder::SEARCH_INT_ONLY);
        $sBaseClassPath = ResourceFinder::findResource(array('includes', 'model', 'om', "Base$sClassName.php"), ResourceFinder::SEARCH_INT_ONLY);
        $sBasePeerClassPath = ResourceFinder::findResource(array('includes', 'model', 'om', "Base${sClassName}Peer.php"), ResourceFinder::SEARCH_INT_ONLY);
        $sBuilderClassPath = ResourceFinder::findResource(array('includes', 'model', 'map', "${sClassName}MapBuilder.php"), ResourceFinder::SEARCH_INT_ONLY);
        
        if(!file_exists("$sNewModelDir/$sClassName.php")) {
          rename($sClassPath, "$sNewModelDir/$sClassName.php");
        } else {
          unlink($sClassPath);
        }
        
        if(!file_exists("$sNewModelDir/${sClassName}Peer.php")) {
          rename($sPeerClassPath, "$sNewModelDir/${sClassName}Peer.php");
        } else {
          unlink($sPeerClassPath);
        }
        
        if(file_exists("$sNewModelBaseDir/Base$sClassName.php")) {
          unlink("$sNewModelBaseDir/Base$sClassName.php");
        }
        rename($sBaseClassPath, "$sNewModelBaseDir/Base$sClassName.php");
        
        if(file_exists("$sNewModelBaseDir/Base${sClassName}Peer.php")) {
          unlink("$sNewModelBaseDir/Base${sClassName}Peer.php");
        }
        rename($sBasePeerClassPath, "$sNewModelBaseDir/Base${sClassName}Peer.php");
        
        if(file_exists("$sNewModelMapDir/${sClassName}MapBuilder.php")) {
          unlink("$sNewModelMapDir/${sClassName}MapBuilder.php");
        }
        rename($sBuilderClassPath, "$sNewModelMapDir/${sClassName}MapBuilder.php");
      }
    }
  }
  
  /**
  * Delete temp files only used while running generate-model
  */
  private static function deleteUnusedFiles() {
    unlink(MAIN_DIR.'/'.DIRNAME_CONFIG.'/schema.xml');
    unlink(MAIN_DIR.'/'.DIRNAME_CONFIG.'/schema-transformed.xml');
  }
}